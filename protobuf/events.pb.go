// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v5.27.3
// source: events.proto

package sandwich

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Ok      bool   `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *BaseResponse) Reset() {
	*x = BaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResponse) ProtoMessage() {}

func (x *BaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResponse.ProtoReflect.Descriptor instead.
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{0}
}

func (x *BaseResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BaseResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *BaseResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse  *BaseResponse      `protobuf:"bytes,1,opt,name=baseResponse,proto3" json:"baseResponse,omitempty"`
	GuildChannels map[int64]*Channel `protobuf:"bytes,2,rep,name=guildChannels,proto3" json:"guildChannels,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChannelsResponse) Reset() {
	*x = ChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelsResponse) ProtoMessage() {}

func (x *ChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelsResponse.ProtoReflect.Descriptor instead.
func (*ChannelsResponse) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelsResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *ChannelsResponse) GetGuildChannels() map[int64]*Channel {
	if x != nil {
		return x.GuildChannels
	}
	return nil
}

type UsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse   `protobuf:"bytes,1,opt,name=baseResponse,proto3" json:"baseResponse,omitempty"`
	Users        map[int64]*User `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UsersResponse) Reset() {
	*x = UsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersResponse) ProtoMessage() {}

func (x *UsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersResponse.ProtoReflect.Descriptor instead.
func (*UsersResponse) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{2}
}

func (x *UsersResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *UsersResponse) GetUsers() map[int64]*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type EmojisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse    `protobuf:"bytes,1,opt,name=baseResponse,proto3" json:"baseResponse,omitempty"`
	GuildEmojis  map[int64]*Emoji `protobuf:"bytes,2,rep,name=guildEmojis,proto3" json:"guildEmojis,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EmojisResponse) Reset() {
	*x = EmojisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmojisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmojisResponse) ProtoMessage() {}

func (x *EmojisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmojisResponse.ProtoReflect.Descriptor instead.
func (*EmojisResponse) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{3}
}

func (x *EmojisResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *EmojisResponse) GetGuildEmojis() map[int64]*Emoji {
	if x != nil {
		return x.GuildEmojis
	}
	return nil
}

type FetchConsumerConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *FetchConsumerConfigurationRequest) Reset() {
	*x = FetchConsumerConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchConsumerConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchConsumerConfigurationRequest) ProtoMessage() {}

func (x *FetchConsumerConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchConsumerConfigurationRequest.ProtoReflect.Descriptor instead.
func (*FetchConsumerConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{4}
}

func (x *FetchConsumerConfigurationRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type FetchConsumerConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *FetchConsumerConfigurationResponse) Reset() {
	*x = FetchConsumerConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchConsumerConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchConsumerConfigurationResponse) ProtoMessage() {}

func (x *FetchConsumerConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchConsumerConfigurationResponse.ProtoReflect.Descriptor instead.
func (*FetchConsumerConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{5}
}

func (x *FetchConsumerConfigurationResponse) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type FetchGuildChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID    int64   `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	ChannelIDs []int64 `protobuf:"varint,2,rep,packed,name=channelIDs,proto3" json:"channelIDs,omitempty"`
	Query      string  `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *FetchGuildChannelsRequest) Reset() {
	*x = FetchGuildChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildChannelsRequest) ProtoMessage() {}

func (x *FetchGuildChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildChannelsRequest.ProtoReflect.Descriptor instead.
func (*FetchGuildChannelsRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{6}
}

func (x *FetchGuildChannelsRequest) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *FetchGuildChannelsRequest) GetChannelIDs() []int64 {
	if x != nil {
		return x.ChannelIDs
	}
	return nil
}

func (x *FetchGuildChannelsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type FetchGuildEmojisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID  int64   `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	EmojiIDs []int64 `protobuf:"varint,2,rep,packed,name=emojiIDs,proto3" json:"emojiIDs,omitempty"`
	Query    string  `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *FetchGuildEmojisRequest) Reset() {
	*x = FetchGuildEmojisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildEmojisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildEmojisRequest) ProtoMessage() {}

func (x *FetchGuildEmojisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildEmojisRequest.ProtoReflect.Descriptor instead.
func (*FetchGuildEmojisRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{7}
}

func (x *FetchGuildEmojisRequest) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *FetchGuildEmojisRequest) GetEmojiIDs() []int64 {
	if x != nil {
		return x.EmojiIDs
	}
	return nil
}

func (x *FetchGuildEmojisRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type FetchUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs         []int64 `protobuf:"varint,1,rep,packed,name=userIDs,proto3" json:"userIDs,omitempty"`
	Query           string  `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	CreateDMChannel bool    `protobuf:"varint,3,opt,name=createDMChannel,proto3" json:"createDMChannel,omitempty"`
	Token           string  `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *FetchUsersRequest) Reset() {
	*x = FetchUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchUsersRequest) ProtoMessage() {}

func (x *FetchUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchUsersRequest.ProtoReflect.Descriptor instead.
func (*FetchUsersRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{8}
}

func (x *FetchUsersRequest) GetUserIDs() []int64 {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *FetchUsersRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *FetchUsersRequest) GetCreateDMChannel() bool {
	if x != nil {
		return x.CreateDMChannel
	}
	return false
}

func (x *FetchUsersRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type FetchGuildMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID     int64   `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	UserIDs     []int64 `protobuf:"varint,2,rep,packed,name=userIDs,proto3" json:"userIDs,omitempty"`
	Query       string  `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	ChunkGuild  bool    `protobuf:"varint,4,opt,name=chunkGuild,proto3" json:"chunkGuild,omitempty"`
	AlwaysChunk bool    `protobuf:"varint,5,opt,name=alwaysChunk,proto3" json:"alwaysChunk,omitempty"`
}

func (x *FetchGuildMembersRequest) Reset() {
	*x = FetchGuildMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildMembersRequest) ProtoMessage() {}

func (x *FetchGuildMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildMembersRequest.ProtoReflect.Descriptor instead.
func (*FetchGuildMembersRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{9}
}

func (x *FetchGuildMembersRequest) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *FetchGuildMembersRequest) GetUserIDs() []int64 {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *FetchGuildMembersRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *FetchGuildMembersRequest) GetChunkGuild() bool {
	if x != nil {
		return x.ChunkGuild
	}
	return false
}

func (x *FetchGuildMembersRequest) GetAlwaysChunk() bool {
	if x != nil {
		return x.AlwaysChunk
	}
	return false
}

type FetchGuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildIDs []int64 `protobuf:"varint,1,rep,packed,name=guildIDs,proto3" json:"guildIDs,omitempty"`
	Query    string  `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *FetchGuildRequest) Reset() {
	*x = FetchGuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildRequest) ProtoMessage() {}

func (x *FetchGuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildRequest.ProtoReflect.Descriptor instead.
func (*FetchGuildRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{10}
}

func (x *FetchGuildRequest) GetGuildIDs() []int64 {
	if x != nil {
		return x.GuildIDs
	}
	return nil
}

func (x *FetchGuildRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type FetchGuildRolesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID int64   `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	RoleIDs []int64 `protobuf:"varint,2,rep,packed,name=roleIDs,proto3" json:"roleIDs,omitempty"`
	Query   string  `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *FetchGuildRolesRequest) Reset() {
	*x = FetchGuildRolesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildRolesRequest) ProtoMessage() {}

func (x *FetchGuildRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildRolesRequest.ProtoReflect.Descriptor instead.
func (*FetchGuildRolesRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{11}
}

func (x *FetchGuildRolesRequest) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *FetchGuildRolesRequest) GetRoleIDs() []int64 {
	if x != nil {
		return x.RoleIDs
	}
	return nil
}

func (x *FetchGuildRolesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type FetchMutualGuildsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Expand bool  `protobuf:"varint,2,opt,name=expand,proto3" json:"expand,omitempty"`
}

func (x *FetchMutualGuildsRequest) Reset() {
	*x = FetchMutualGuildsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMutualGuildsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMutualGuildsRequest) ProtoMessage() {}

func (x *FetchMutualGuildsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMutualGuildsRequest.ProtoReflect.Descriptor instead.
func (*FetchMutualGuildsRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{12}
}

func (x *FetchMutualGuildsRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *FetchMutualGuildsRequest) GetExpand() bool {
	if x != nil {
		return x.Expand
	}
	return false
}

type GuildMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse          `protobuf:"bytes,1,opt,name=baseResponse,proto3" json:"baseResponse,omitempty"`
	GuildMembers map[int64]*GuildMember `protobuf:"bytes,2,rep,name=guildMembers,proto3" json:"guildMembers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GuildMembersResponse) Reset() {
	*x = GuildMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMembersResponse) ProtoMessage() {}

func (x *GuildMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMembersResponse.ProtoReflect.Descriptor instead.
func (*GuildMembersResponse) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{13}
}

func (x *GuildMembersResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GuildMembersResponse) GetGuildMembers() map[int64]*GuildMember {
	if x != nil {
		return x.GuildMembers
	}
	return nil
}

type GuildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse,proto3" json:"baseResponse,omitempty"`
	Guild        *Guild        `protobuf:"bytes,2,opt,name=guild,proto3" json:"guild,omitempty"`
}

func (x *GuildResponse) Reset() {
	*x = GuildResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildResponse) ProtoMessage() {}

func (x *GuildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildResponse.ProtoReflect.Descriptor instead.
func (*GuildResponse) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{14}
}

func (x *GuildResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GuildResponse) GetGuild() *Guild {
	if x != nil {
		return x.Guild
	}
	return nil
}

type GuildRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse   `protobuf:"bytes,1,opt,name=baseResponse,proto3" json:"baseResponse,omitempty"`
	GuildRoles   map[int64]*Role `protobuf:"bytes,2,rep,name=guildRoles,proto3" json:"guildRoles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GuildRolesResponse) Reset() {
	*x = GuildRolesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildRolesResponse) ProtoMessage() {}

func (x *GuildRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildRolesResponse.ProtoReflect.Descriptor instead.
func (*GuildRolesResponse) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{15}
}

func (x *GuildRolesResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GuildRolesResponse) GetGuildRoles() map[int64]*Role {
	if x != nil {
		return x.GuildRoles
	}
	return nil
}

type GuildsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse    `protobuf:"bytes,1,opt,name=baseResponse,proto3" json:"baseResponse,omitempty"`
	Guilds       map[int64]*Guild `protobuf:"bytes,2,rep,name=guilds,proto3" json:"guilds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GuildIDs     []int64          `protobuf:"varint,3,rep,packed,name=guildIDs,proto3" json:"guildIDs,omitempty"`
}

func (x *GuildsResponse) Reset() {
	*x = GuildsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildsResponse) ProtoMessage() {}

func (x *GuildsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildsResponse.ProtoReflect.Descriptor instead.
func (*GuildsResponse) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{16}
}

func (x *GuildsResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GuildsResponse) GetGuilds() map[int64]*Guild {
	if x != nil {
		return x.Guilds
	}
	return nil
}

func (x *GuildsResponse) GetGuildIDs() []int64 {
	if x != nil {
		return x.GuildIDs
	}
	return nil
}

type RequestGuildChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId     int64 `protobuf:"varint,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	AlwaysChunk bool  `protobuf:"varint,2,opt,name=alwaysChunk,proto3" json:"alwaysChunk,omitempty"`
}

func (x *RequestGuildChunkRequest) Reset() {
	*x = RequestGuildChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGuildChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGuildChunkRequest) ProtoMessage() {}

func (x *RequestGuildChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGuildChunkRequest.ProtoReflect.Descriptor instead.
func (*RequestGuildChunkRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{17}
}

func (x *RequestGuildChunkRequest) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *RequestGuildChunkRequest) GetAlwaysChunk() bool {
	if x != nil {
		return x.AlwaysChunk
	}
	return false
}

type SendWebsocketMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manager       string `protobuf:"bytes,1,opt,name=manager,proto3" json:"manager,omitempty"`
	ShardGroup    int32  `protobuf:"varint,2,opt,name=shardGroup,proto3" json:"shardGroup,omitempty"`
	Shard         int32  `protobuf:"varint,3,opt,name=shard,proto3" json:"shard,omitempty"`
	GatewayOPCode int32  `protobuf:"varint,4,opt,name=gatewayOPCode,proto3" json:"gatewayOPCode,omitempty"`
	Data          []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SendWebsocketMessageRequest) Reset() {
	*x = SendWebsocketMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendWebsocketMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendWebsocketMessageRequest) ProtoMessage() {}

func (x *SendWebsocketMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendWebsocketMessageRequest.ProtoReflect.Descriptor instead.
func (*SendWebsocketMessageRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{18}
}

func (x *SendWebsocketMessageRequest) GetManager() string {
	if x != nil {
		return x.Manager
	}
	return ""
}

func (x *SendWebsocketMessageRequest) GetShardGroup() int32 {
	if x != nil {
		return x.ShardGroup
	}
	return 0
}

func (x *SendWebsocketMessageRequest) GetShard() int32 {
	if x != nil {
		return x.Shard
	}
	return 0
}

func (x *SendWebsocketMessageRequest) GetGatewayOPCode() int32 {
	if x != nil {
		return x.GatewayOPCode
	}
	return 0
}

func (x *SendWebsocketMessageRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type WhereIsGuildLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manager     string       `protobuf:"bytes,1,opt,name=manager,proto3" json:"manager,omitempty"`
	ShardGroup  int32        `protobuf:"varint,2,opt,name=shardGroup,proto3" json:"shardGroup,omitempty"`
	ShardId     int32        `protobuf:"varint,3,opt,name=shardId,proto3" json:"shardId,omitempty"`
	GuildMember *GuildMember `protobuf:"bytes,4,opt,name=guildMember,proto3" json:"guildMember,omitempty"`
}

func (x *WhereIsGuildLocation) Reset() {
	*x = WhereIsGuildLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhereIsGuildLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhereIsGuildLocation) ProtoMessage() {}

func (x *WhereIsGuildLocation) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhereIsGuildLocation.ProtoReflect.Descriptor instead.
func (*WhereIsGuildLocation) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{19}
}

func (x *WhereIsGuildLocation) GetManager() string {
	if x != nil {
		return x.Manager
	}
	return ""
}

func (x *WhereIsGuildLocation) GetShardGroup() int32 {
	if x != nil {
		return x.ShardGroup
	}
	return 0
}

func (x *WhereIsGuildLocation) GetShardId() int32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *WhereIsGuildLocation) GetGuildMember() *GuildMember {
	if x != nil {
		return x.GuildMember
	}
	return nil
}

type WhereIsGuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID int64 `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
}

func (x *WhereIsGuildRequest) Reset() {
	*x = WhereIsGuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhereIsGuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhereIsGuildRequest) ProtoMessage() {}

func (x *WhereIsGuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhereIsGuildRequest.ProtoReflect.Descriptor instead.
func (*WhereIsGuildRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{20}
}

func (x *WhereIsGuildRequest) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

type WhereIsGuildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse           `protobuf:"bytes,1,opt,name=baseResponse,proto3" json:"baseResponse,omitempty"`
	Locations    []*WhereIsGuildLocation `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *WhereIsGuildResponse) Reset() {
	*x = WhereIsGuildResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhereIsGuildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhereIsGuildResponse) ProtoMessage() {}

func (x *WhereIsGuildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhereIsGuildResponse.ProtoReflect.Descriptor instead.
func (*WhereIsGuildResponse) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{21}
}

func (x *WhereIsGuildResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *WhereIsGuildResponse) GetLocations() []*WhereIsGuildLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

type ListenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *ListenRequest) Reset() {
	*x = ListenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRequest) ProtoMessage() {}

func (x *ListenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRequest.ProtoReflect.Descriptor instead.
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{22}
}

func (x *ListenRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type ListenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListenResponse) Reset() {
	*x = ListenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenResponse) ProtoMessage() {}

func (x *ListenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenResponse.ProtoReflect.Descriptor instead.
func (*ListenResponse) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{23}
}

func (x *ListenResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ListenResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PostAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// GRPC does not determine the structure of the data provided.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PostAnalyticsRequest) Reset() {
	*x = PostAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAnalyticsRequest) ProtoMessage() {}

func (x *PostAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*PostAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{24}
}

func (x *PostAnalyticsRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *PostAnalyticsRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RelayMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manager string `protobuf:"bytes,1,opt,name=manager,proto3" json:"manager,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Data    []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RelayMessageRequest) Reset() {
	*x = RelayMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayMessageRequest) ProtoMessage() {}

func (x *RelayMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayMessageRequest.ProtoReflect.Descriptor instead.
func (*RelayMessageRequest) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{25}
}

func (x *RelayMessageRequest) GetManager() string {
	if x != nil {
		return x.Manager
	}
	return ""
}

func (x *RelayMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RelayMessageRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_events_proto protoreflect.FileDescriptor

var file_events_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x1a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf8, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x53, 0x0a,
	0x12, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xcf, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x48, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x0e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73,
	0x1a, 0x4f, 0x0a, 0x10, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x43, 0x0a, 0x21, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x38, 0x0a, 0x22, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0x6b, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x65, 0x0a,
	0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x44, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x44, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x4d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x18, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x22, 0x45, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x62, 0x0a, 0x16, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x4a,
	0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x14, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x0c, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x56, 0x0a, 0x11, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x72, 0x0a,
	0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x22, 0xed, 0x01, 0x0a, 0x12, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x1a, 0x4d, 0x0a, 0x0f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xf2, 0x01, 0x0a, 0x0e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x73, 0x1a, 0x4a, 0x0a, 0x0b, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0xa7,
	0x01, 0x0a, 0x1b, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4f, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4f, 0x50,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x14, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x49, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x2f,
	0x0a, 0x13, 0x57, 0x68, 0x65, 0x72, 0x65, 0x49, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x22,
	0x90, 0x01, 0x0a, 0x14, 0x57, 0x68, 0x65, 0x72, 0x65, 0x49, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x49, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x2f, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x95, 0x09, 0x0a,
	0x08, 0x53, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x12, 0x3f, 0x0a, 0x06, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x12, 0x17, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0d, 0x50, 0x6f,
	0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x1a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x0a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1b,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x0a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1b, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x22,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d,
	0x75, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x22, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x57, 0x68,
	0x65, 0x72, 0x65, 0x49, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x49, 0x73, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x49, 0x73, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0c, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x2f,
	0x53, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2d, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_events_proto_rawDescOnce sync.Once
	file_events_proto_rawDescData = file_events_proto_rawDesc
)

func file_events_proto_rawDescGZIP() []byte {
	file_events_proto_rawDescOnce.Do(func() {
		file_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_events_proto_rawDescData)
	})
	return file_events_proto_rawDescData
}

var file_events_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_events_proto_goTypes = []interface{}{
	(*BaseResponse)(nil),                       // 0: sandwich.BaseResponse
	(*ChannelsResponse)(nil),                   // 1: sandwich.ChannelsResponse
	(*UsersResponse)(nil),                      // 2: sandwich.UsersResponse
	(*EmojisResponse)(nil),                     // 3: sandwich.EmojisResponse
	(*FetchConsumerConfigurationRequest)(nil),  // 4: sandwich.FetchConsumerConfigurationRequest
	(*FetchConsumerConfigurationResponse)(nil), // 5: sandwich.FetchConsumerConfigurationResponse
	(*FetchGuildChannelsRequest)(nil),          // 6: sandwich.FetchGuildChannelsRequest
	(*FetchGuildEmojisRequest)(nil),            // 7: sandwich.FetchGuildEmojisRequest
	(*FetchUsersRequest)(nil),                  // 8: sandwich.FetchUsersRequest
	(*FetchGuildMembersRequest)(nil),           // 9: sandwich.FetchGuildMembersRequest
	(*FetchGuildRequest)(nil),                  // 10: sandwich.FetchGuildRequest
	(*FetchGuildRolesRequest)(nil),             // 11: sandwich.FetchGuildRolesRequest
	(*FetchMutualGuildsRequest)(nil),           // 12: sandwich.FetchMutualGuildsRequest
	(*GuildMembersResponse)(nil),               // 13: sandwich.GuildMembersResponse
	(*GuildResponse)(nil),                      // 14: sandwich.GuildResponse
	(*GuildRolesResponse)(nil),                 // 15: sandwich.GuildRolesResponse
	(*GuildsResponse)(nil),                     // 16: sandwich.GuildsResponse
	(*RequestGuildChunkRequest)(nil),           // 17: sandwich.RequestGuildChunkRequest
	(*SendWebsocketMessageRequest)(nil),        // 18: sandwich.SendWebsocketMessageRequest
	(*WhereIsGuildLocation)(nil),               // 19: sandwich.WhereIsGuildLocation
	(*WhereIsGuildRequest)(nil),                // 20: sandwich.WhereIsGuildRequest
	(*WhereIsGuildResponse)(nil),               // 21: sandwich.WhereIsGuildResponse
	(*ListenRequest)(nil),                      // 22: sandwich.ListenRequest
	(*ListenResponse)(nil),                     // 23: sandwich.ListenResponse
	(*PostAnalyticsRequest)(nil),               // 24: sandwich.PostAnalyticsRequest
	(*RelayMessageRequest)(nil),                // 25: sandwich.RelayMessageRequest
	nil,                                        // 26: sandwich.ChannelsResponse.GuildChannelsEntry
	nil,                                        // 27: sandwich.UsersResponse.UsersEntry
	nil,                                        // 28: sandwich.EmojisResponse.GuildEmojisEntry
	nil,                                        // 29: sandwich.GuildMembersResponse.GuildMembersEntry
	nil,                                        // 30: sandwich.GuildRolesResponse.GuildRolesEntry
	nil,                                        // 31: sandwich.GuildsResponse.GuildsEntry
	(*Guild)(nil),                              // 32: sandwich.Guild
	(*GuildMember)(nil),                        // 33: sandwich.GuildMember
	(*Channel)(nil),                            // 34: sandwich.Channel
	(*User)(nil),                               // 35: sandwich.User
	(*Emoji)(nil),                              // 36: sandwich.Emoji
	(*Role)(nil),                               // 37: sandwich.Role
}
var file_events_proto_depIdxs = []int32{
	0,  // 0: sandwich.ChannelsResponse.baseResponse:type_name -> sandwich.BaseResponse
	26, // 1: sandwich.ChannelsResponse.guildChannels:type_name -> sandwich.ChannelsResponse.GuildChannelsEntry
	0,  // 2: sandwich.UsersResponse.baseResponse:type_name -> sandwich.BaseResponse
	27, // 3: sandwich.UsersResponse.users:type_name -> sandwich.UsersResponse.UsersEntry
	0,  // 4: sandwich.EmojisResponse.baseResponse:type_name -> sandwich.BaseResponse
	28, // 5: sandwich.EmojisResponse.guildEmojis:type_name -> sandwich.EmojisResponse.GuildEmojisEntry
	0,  // 6: sandwich.GuildMembersResponse.baseResponse:type_name -> sandwich.BaseResponse
	29, // 7: sandwich.GuildMembersResponse.guildMembers:type_name -> sandwich.GuildMembersResponse.GuildMembersEntry
	0,  // 8: sandwich.GuildResponse.baseResponse:type_name -> sandwich.BaseResponse
	32, // 9: sandwich.GuildResponse.guild:type_name -> sandwich.Guild
	0,  // 10: sandwich.GuildRolesResponse.baseResponse:type_name -> sandwich.BaseResponse
	30, // 11: sandwich.GuildRolesResponse.guildRoles:type_name -> sandwich.GuildRolesResponse.GuildRolesEntry
	0,  // 12: sandwich.GuildsResponse.baseResponse:type_name -> sandwich.BaseResponse
	31, // 13: sandwich.GuildsResponse.guilds:type_name -> sandwich.GuildsResponse.GuildsEntry
	33, // 14: sandwich.WhereIsGuildLocation.guildMember:type_name -> sandwich.GuildMember
	0,  // 15: sandwich.WhereIsGuildResponse.baseResponse:type_name -> sandwich.BaseResponse
	19, // 16: sandwich.WhereIsGuildResponse.locations:type_name -> sandwich.WhereIsGuildLocation
	34, // 17: sandwich.ChannelsResponse.GuildChannelsEntry.value:type_name -> sandwich.Channel
	35, // 18: sandwich.UsersResponse.UsersEntry.value:type_name -> sandwich.User
	36, // 19: sandwich.EmojisResponse.GuildEmojisEntry.value:type_name -> sandwich.Emoji
	33, // 20: sandwich.GuildMembersResponse.GuildMembersEntry.value:type_name -> sandwich.GuildMember
	37, // 21: sandwich.GuildRolesResponse.GuildRolesEntry.value:type_name -> sandwich.Role
	32, // 22: sandwich.GuildsResponse.GuildsEntry.value:type_name -> sandwich.Guild
	22, // 23: sandwich.Sandwich.Listen:input_type -> sandwich.ListenRequest
	24, // 24: sandwich.Sandwich.PostAnalytics:input_type -> sandwich.PostAnalyticsRequest
	4,  // 25: sandwich.Sandwich.FetchConsumerConfiguration:input_type -> sandwich.FetchConsumerConfigurationRequest
	8,  // 26: sandwich.Sandwich.FetchUsers:input_type -> sandwich.FetchUsersRequest
	6,  // 27: sandwich.Sandwich.FetchGuildChannels:input_type -> sandwich.FetchGuildChannelsRequest
	7,  // 28: sandwich.Sandwich.FetchGuildEmojis:input_type -> sandwich.FetchGuildEmojisRequest
	9,  // 29: sandwich.Sandwich.FetchGuildMembers:input_type -> sandwich.FetchGuildMembersRequest
	10, // 30: sandwich.Sandwich.FetchGuild:input_type -> sandwich.FetchGuildRequest
	11, // 31: sandwich.Sandwich.FetchGuildRoles:input_type -> sandwich.FetchGuildRolesRequest
	12, // 32: sandwich.Sandwich.FetchMutualGuilds:input_type -> sandwich.FetchMutualGuildsRequest
	17, // 33: sandwich.Sandwich.RequestGuildChunk:input_type -> sandwich.RequestGuildChunkRequest
	18, // 34: sandwich.Sandwich.SendWebsocketMessage:input_type -> sandwich.SendWebsocketMessageRequest
	20, // 35: sandwich.Sandwich.WhereIsGuild:input_type -> sandwich.WhereIsGuildRequest
	25, // 36: sandwich.Sandwich.RelayMessage:input_type -> sandwich.RelayMessageRequest
	23, // 37: sandwich.Sandwich.Listen:output_type -> sandwich.ListenResponse
	0,  // 38: sandwich.Sandwich.PostAnalytics:output_type -> sandwich.BaseResponse
	5,  // 39: sandwich.Sandwich.FetchConsumerConfiguration:output_type -> sandwich.FetchConsumerConfigurationResponse
	2,  // 40: sandwich.Sandwich.FetchUsers:output_type -> sandwich.UsersResponse
	1,  // 41: sandwich.Sandwich.FetchGuildChannels:output_type -> sandwich.ChannelsResponse
	3,  // 42: sandwich.Sandwich.FetchGuildEmojis:output_type -> sandwich.EmojisResponse
	13, // 43: sandwich.Sandwich.FetchGuildMembers:output_type -> sandwich.GuildMembersResponse
	16, // 44: sandwich.Sandwich.FetchGuild:output_type -> sandwich.GuildsResponse
	15, // 45: sandwich.Sandwich.FetchGuildRoles:output_type -> sandwich.GuildRolesResponse
	16, // 46: sandwich.Sandwich.FetchMutualGuilds:output_type -> sandwich.GuildsResponse
	0,  // 47: sandwich.Sandwich.RequestGuildChunk:output_type -> sandwich.BaseResponse
	0,  // 48: sandwich.Sandwich.SendWebsocketMessage:output_type -> sandwich.BaseResponse
	21, // 49: sandwich.Sandwich.WhereIsGuild:output_type -> sandwich.WhereIsGuildResponse
	0,  // 50: sandwich.Sandwich.RelayMessage:output_type -> sandwich.BaseResponse
	37, // [37:51] is the sub-list for method output_type
	23, // [23:37] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_events_proto_init() }
func file_events_proto_init() {
	if File_events_proto != nil {
		return
	}
	file_discord_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmojisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchConsumerConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchConsumerConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildEmojisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildRolesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMutualGuildsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildRolesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGuildChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendWebsocketMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhereIsGuildLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhereIsGuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhereIsGuildResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_events_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_events_proto_goTypes,
		DependencyIndexes: file_events_proto_depIdxs,
		MessageInfos:      file_events_proto_msgTypes,
	}.Build()
	File_events_proto = out.File
	file_events_proto_rawDesc = nil
	file_events_proto_goTypes = nil
	file_events_proto_depIdxs = nil
}
