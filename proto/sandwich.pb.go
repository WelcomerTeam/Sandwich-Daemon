// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v6.30.2
// source: sandwich.proto

package sandwich

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok    bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *BaseResponse) Reset() {
	*x = BaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResponse) ProtoMessage() {}

func (x *BaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResponse.ProtoReflect.Descriptor instead.
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{0}
}

func (x *BaseResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *BaseResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ListenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *ListenRequest) Reset() {
	*x = ListenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRequest) ProtoMessage() {}

func (x *ListenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRequest.ProtoReflect.Descriptor instead.
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{1}
}

func (x *ListenRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type ListenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListenResponse) Reset() {
	*x = ListenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenResponse) ProtoMessage() {}

func (x *ListenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenResponse.ProtoReflect.Descriptor instead.
func (*ListenResponse) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{2}
}

func (x *ListenResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ListenResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApplicationIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationIdentifier string `protobuf:"bytes,1,opt,name=application_identifier,json=applicationIdentifier,proto3" json:"application_identifier,omitempty"`
}

func (x *ApplicationIdentifier) Reset() {
	*x = ApplicationIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationIdentifier) ProtoMessage() {}

func (x *ApplicationIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationIdentifier.ProtoReflect.Descriptor instead.
func (*ApplicationIdentifier) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{3}
}

func (x *ApplicationIdentifier) GetApplicationIdentifier() string {
	if x != nil {
		return x.ApplicationIdentifier
	}
	return ""
}

type ApplicationIdentifierWithBlocking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationIdentifier string `protobuf:"bytes,1,opt,name=application_identifier,json=applicationIdentifier,proto3" json:"application_identifier,omitempty"`
	Blocking              bool   `protobuf:"varint,2,opt,name=blocking,proto3" json:"blocking,omitempty"`
}

func (x *ApplicationIdentifierWithBlocking) Reset() {
	*x = ApplicationIdentifierWithBlocking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationIdentifierWithBlocking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationIdentifierWithBlocking) ProtoMessage() {}

func (x *ApplicationIdentifierWithBlocking) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationIdentifierWithBlocking.ProtoReflect.Descriptor instead.
func (*ApplicationIdentifierWithBlocking) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{4}
}

func (x *ApplicationIdentifierWithBlocking) GetApplicationIdentifier() string {
	if x != nil {
		return x.ApplicationIdentifier
	}
	return ""
}

func (x *ApplicationIdentifierWithBlocking) GetBlocking() bool {
	if x != nil {
		return x.Blocking
	}
	return false
}

type FetchApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse                   `protobuf:"bytes,1,opt,name=base_response,json=baseResponse,proto3" json:"base_response,omitempty"`
	Applications map[string]*SandwichApplication `protobuf:"bytes,2,rep,name=applications,proto3" json:"applications,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchApplicationResponse) Reset() {
	*x = FetchApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchApplicationResponse) ProtoMessage() {}

func (x *FetchApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchApplicationResponse.ProtoReflect.Descriptor instead.
func (*FetchApplicationResponse) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{5}
}

func (x *FetchApplicationResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FetchApplicationResponse) GetApplications() map[string]*SandwichApplication {
	if x != nil {
		return x.Applications
	}
	return nil
}

type CreateApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaveConfig            bool     `protobuf:"varint,1,opt,name=save_config,json=saveConfig,proto3" json:"save_config,omitempty"`
	CreateOnly            bool     `protobuf:"varint,2,opt,name=create_only,json=createOnly,proto3" json:"create_only,omitempty"`
	ApplicationIdentifier string   `protobuf:"bytes,3,opt,name=application_identifier,json=applicationIdentifier,proto3" json:"application_identifier,omitempty"`
	ProducerIdentifier    string   `protobuf:"bytes,4,opt,name=producer_identifier,json=producerIdentifier,proto3" json:"producer_identifier,omitempty"`
	DisplayName           string   `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ClientName            string   `protobuf:"bytes,6,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	IncludeRandomSuffix   bool     `protobuf:"varint,7,opt,name=include_random_suffix,json=includeRandomSuffix,proto3" json:"include_random_suffix,omitempty"`
	BotToken              string   `protobuf:"bytes,8,opt,name=bot_token,json=botToken,proto3" json:"bot_token,omitempty"`
	AutoStart             bool     `protobuf:"varint,9,opt,name=auto_start,json=autoStart,proto3" json:"auto_start,omitempty"`
	DefaultPresence       []byte   `protobuf:"bytes,10,opt,name=default_presence,json=defaultPresence,proto3" json:"default_presence,omitempty"`
	Intents               int32    `protobuf:"varint,11,opt,name=intents,proto3" json:"intents,omitempty"`
	ChunkGuildsOnStart    bool     `protobuf:"varint,12,opt,name=chunk_guilds_on_start,json=chunkGuildsOnStart,proto3" json:"chunk_guilds_on_start,omitempty"`
	EventBlacklist        []string `protobuf:"bytes,13,rep,name=event_blacklist,json=eventBlacklist,proto3" json:"event_blacklist,omitempty"`
	ProduceBlacklist      []string `protobuf:"bytes,14,rep,name=produce_blacklist,json=produceBlacklist,proto3" json:"produce_blacklist,omitempty"`
	AutoSharded           bool     `protobuf:"varint,15,opt,name=auto_sharded,json=autoSharded,proto3" json:"auto_sharded,omitempty"`
	ShardCount            int32    `protobuf:"varint,16,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	ShardIds              string   `protobuf:"bytes,17,opt,name=shard_ids,json=shardIds,proto3" json:"shard_ids,omitempty"`
	Values                []byte   `protobuf:"bytes,18,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *CreateApplicationRequest) Reset() {
	*x = CreateApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationRequest) ProtoMessage() {}

func (x *CreateApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{6}
}

func (x *CreateApplicationRequest) GetSaveConfig() bool {
	if x != nil {
		return x.SaveConfig
	}
	return false
}

func (x *CreateApplicationRequest) GetCreateOnly() bool {
	if x != nil {
		return x.CreateOnly
	}
	return false
}

func (x *CreateApplicationRequest) GetApplicationIdentifier() string {
	if x != nil {
		return x.ApplicationIdentifier
	}
	return ""
}

func (x *CreateApplicationRequest) GetProducerIdentifier() string {
	if x != nil {
		return x.ProducerIdentifier
	}
	return ""
}

func (x *CreateApplicationRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CreateApplicationRequest) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *CreateApplicationRequest) GetIncludeRandomSuffix() bool {
	if x != nil {
		return x.IncludeRandomSuffix
	}
	return false
}

func (x *CreateApplicationRequest) GetBotToken() string {
	if x != nil {
		return x.BotToken
	}
	return ""
}

func (x *CreateApplicationRequest) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

func (x *CreateApplicationRequest) GetDefaultPresence() []byte {
	if x != nil {
		return x.DefaultPresence
	}
	return nil
}

func (x *CreateApplicationRequest) GetIntents() int32 {
	if x != nil {
		return x.Intents
	}
	return 0
}

func (x *CreateApplicationRequest) GetChunkGuildsOnStart() bool {
	if x != nil {
		return x.ChunkGuildsOnStart
	}
	return false
}

func (x *CreateApplicationRequest) GetEventBlacklist() []string {
	if x != nil {
		return x.EventBlacklist
	}
	return nil
}

func (x *CreateApplicationRequest) GetProduceBlacklist() []string {
	if x != nil {
		return x.ProduceBlacklist
	}
	return nil
}

func (x *CreateApplicationRequest) GetAutoSharded() bool {
	if x != nil {
		return x.AutoSharded
	}
	return false
}

func (x *CreateApplicationRequest) GetShardCount() int32 {
	if x != nil {
		return x.ShardCount
	}
	return 0
}

func (x *CreateApplicationRequest) GetShardIds() string {
	if x != nil {
		return x.ShardIds
	}
	return ""
}

func (x *CreateApplicationRequest) GetValues() []byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type SandwichApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationIdentifier string           `protobuf:"bytes,1,opt,name=application_identifier,json=applicationIdentifier,proto3" json:"application_identifier,omitempty"`
	ProducerIdentifier    string           `protobuf:"bytes,2,opt,name=producer_identifier,json=producerIdentifier,proto3" json:"producer_identifier,omitempty"`
	DisplayName           string           `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	BotToken              string           `protobuf:"bytes,4,opt,name=bot_token,json=botToken,proto3" json:"bot_token,omitempty"`
	ShardCount            int32            `protobuf:"varint,5,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	AutoSharded           bool             `protobuf:"varint,7,opt,name=auto_sharded,json=autoSharded,proto3" json:"auto_sharded,omitempty"`
	Status                int32            `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	StartedAt             int64            `protobuf:"varint,9,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	UserId                int64            `protobuf:"varint,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Values                []byte           `protobuf:"bytes,11,opt,name=values,proto3" json:"values,omitempty"`
	Shards                map[int32]*Shard `protobuf:"bytes,12,rep,name=shards,proto3" json:"shards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SandwichApplication) Reset() {
	*x = SandwichApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SandwichApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandwichApplication) ProtoMessage() {}

func (x *SandwichApplication) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandwichApplication.ProtoReflect.Descriptor instead.
func (*SandwichApplication) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{7}
}

func (x *SandwichApplication) GetApplicationIdentifier() string {
	if x != nil {
		return x.ApplicationIdentifier
	}
	return ""
}

func (x *SandwichApplication) GetProducerIdentifier() string {
	if x != nil {
		return x.ProducerIdentifier
	}
	return ""
}

func (x *SandwichApplication) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *SandwichApplication) GetBotToken() string {
	if x != nil {
		return x.BotToken
	}
	return ""
}

func (x *SandwichApplication) GetShardCount() int32 {
	if x != nil {
		return x.ShardCount
	}
	return 0
}

func (x *SandwichApplication) GetAutoSharded() bool {
	if x != nil {
		return x.AutoSharded
	}
	return false
}

func (x *SandwichApplication) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SandwichApplication) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *SandwichApplication) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SandwichApplication) GetValues() []byte {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *SandwichApplication) GetShards() map[int32]*Shard {
	if x != nil {
		return x.Shards
	}
	return nil
}

type Shard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status            int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	StartedAt         int64 `protobuf:"varint,3,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	UnavailableGuilds int32 `protobuf:"varint,4,opt,name=unavailable_guilds,json=unavailableGuilds,proto3" json:"unavailable_guilds,omitempty"`
	LazyGuilds        int32 `protobuf:"varint,5,opt,name=lazy_guilds,json=lazyGuilds,proto3" json:"lazy_guilds,omitempty"`
	Guilds            int32 `protobuf:"varint,6,opt,name=guilds,proto3" json:"guilds,omitempty"`
	Sequence          int32 `protobuf:"varint,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
	LastHeartbeatSent int64 `protobuf:"varint,8,opt,name=last_heartbeat_sent,json=lastHeartbeatSent,proto3" json:"last_heartbeat_sent,omitempty"`
	LastHeartbeatAck  int64 `protobuf:"varint,9,opt,name=last_heartbeat_ack,json=lastHeartbeatAck,proto3" json:"last_heartbeat_ack,omitempty"`
	GatewayLatency    int64 `protobuf:"varint,10,opt,name=gateway_latency,json=gatewayLatency,proto3" json:"gateway_latency,omitempty"`
}

func (x *Shard) Reset() {
	*x = Shard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shard) ProtoMessage() {}

func (x *Shard) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shard.ProtoReflect.Descriptor instead.
func (*Shard) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{8}
}

func (x *Shard) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Shard) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Shard) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *Shard) GetUnavailableGuilds() int32 {
	if x != nil {
		return x.UnavailableGuilds
	}
	return 0
}

func (x *Shard) GetLazyGuilds() int32 {
	if x != nil {
		return x.LazyGuilds
	}
	return 0
}

func (x *Shard) GetGuilds() int32 {
	if x != nil {
		return x.Guilds
	}
	return 0
}

func (x *Shard) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Shard) GetLastHeartbeatSent() int64 {
	if x != nil {
		return x.LastHeartbeatSent
	}
	return 0
}

func (x *Shard) GetLastHeartbeatAck() int64 {
	if x != nil {
		return x.LastHeartbeatAck
	}
	return 0
}

func (x *Shard) GetGatewayLatency() int64 {
	if x != nil {
		return x.GatewayLatency
	}
	return 0
}

type RequestGuildChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId     int64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	AlwaysChunk bool  `protobuf:"varint,2,opt,name=always_chunk,json=alwaysChunk,proto3" json:"always_chunk,omitempty"`
}

func (x *RequestGuildChunkRequest) Reset() {
	*x = RequestGuildChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGuildChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGuildChunkRequest) ProtoMessage() {}

func (x *RequestGuildChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGuildChunkRequest.ProtoReflect.Descriptor instead.
func (*RequestGuildChunkRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{9}
}

func (x *RequestGuildChunkRequest) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *RequestGuildChunkRequest) GetAlwaysChunk() bool {
	if x != nil {
		return x.AlwaysChunk
	}
	return false
}

type SendWebsocketMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier    string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Shard         int32  `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	GatewayOpCode int32  `protobuf:"varint,3,opt,name=gateway_op_code,json=gatewayOpCode,proto3" json:"gateway_op_code,omitempty"`
	Data          []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SendWebsocketMessageRequest) Reset() {
	*x = SendWebsocketMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendWebsocketMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendWebsocketMessageRequest) ProtoMessage() {}

func (x *SendWebsocketMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendWebsocketMessageRequest.ProtoReflect.Descriptor instead.
func (*SendWebsocketMessageRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{10}
}

func (x *SendWebsocketMessageRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *SendWebsocketMessageRequest) GetShard() int32 {
	if x != nil {
		return x.Shard
	}
	return 0
}

func (x *SendWebsocketMessageRequest) GetGatewayOpCode() int32 {
	if x != nil {
		return x.GatewayOpCode
	}
	return 0
}

func (x *SendWebsocketMessageRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RelayMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Data       []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RelayMessageRequest) Reset() {
	*x = RelayMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayMessageRequest) ProtoMessage() {}

func (x *RelayMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayMessageRequest.ProtoReflect.Descriptor instead.
func (*RelayMessageRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{11}
}

func (x *RelayMessageRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *RelayMessageRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RelayMessageRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type WhereIsGuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId int64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *WhereIsGuildRequest) Reset() {
	*x = WhereIsGuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhereIsGuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhereIsGuildRequest) ProtoMessage() {}

func (x *WhereIsGuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhereIsGuildRequest.ProtoReflect.Descriptor instead.
func (*WhereIsGuildRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{12}
}

func (x *WhereIsGuildRequest) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type WhereIsGuildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse                   `protobuf:"bytes,1,opt,name=base_response,json=baseResponse,proto3" json:"base_response,omitempty"`
	Locations    map[int64]*WhereIsGuildLocation `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WhereIsGuildResponse) Reset() {
	*x = WhereIsGuildResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhereIsGuildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhereIsGuildResponse) ProtoMessage() {}

func (x *WhereIsGuildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhereIsGuildResponse.ProtoReflect.Descriptor instead.
func (*WhereIsGuildResponse) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{13}
}

func (x *WhereIsGuildResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *WhereIsGuildResponse) GetLocations() map[int64]*WhereIsGuildLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

type WhereIsGuildLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier  string       `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	ShardId     int32        `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	GuildMember *GuildMember `protobuf:"bytes,3,opt,name=guild_member,json=guildMember,proto3" json:"guild_member,omitempty"`
}

func (x *WhereIsGuildLocation) Reset() {
	*x = WhereIsGuildLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhereIsGuildLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhereIsGuildLocation) ProtoMessage() {}

func (x *WhereIsGuildLocation) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhereIsGuildLocation.ProtoReflect.Descriptor instead.
func (*WhereIsGuildLocation) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{14}
}

func (x *WhereIsGuildLocation) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *WhereIsGuildLocation) GetShardId() int32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *WhereIsGuildLocation) GetGuildMember() *GuildMember {
	if x != nil {
		return x.GuildMember
	}
	return nil
}

type FetchGuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId int64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *FetchGuildRequest) Reset() {
	*x = FetchGuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildRequest) ProtoMessage() {}

func (x *FetchGuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildRequest.ProtoReflect.Descriptor instead.
func (*FetchGuildRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{15}
}

func (x *FetchGuildRequest) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type FetchGuildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse    `protobuf:"bytes,1,opt,name=base_response,json=baseResponse,proto3" json:"base_response,omitempty"`
	Guilds       map[int64]*Guild `protobuf:"bytes,2,rep,name=guilds,proto3" json:"guilds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchGuildResponse) Reset() {
	*x = FetchGuildResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildResponse) ProtoMessage() {}

func (x *FetchGuildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildResponse.ProtoReflect.Descriptor instead.
func (*FetchGuildResponse) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{16}
}

func (x *FetchGuildResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FetchGuildResponse) GetGuilds() map[int64]*Guild {
	if x != nil {
		return x.Guilds
	}
	return nil
}

type FetchGuildMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId int64   `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	UserIds []int64 `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *FetchGuildMemberRequest) Reset() {
	*x = FetchGuildMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildMemberRequest) ProtoMessage() {}

func (x *FetchGuildMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildMemberRequest.ProtoReflect.Descriptor instead.
func (*FetchGuildMemberRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{17}
}

func (x *FetchGuildMemberRequest) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *FetchGuildMemberRequest) GetUserIds() []int64 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type FetchGuildMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse          `protobuf:"bytes,1,opt,name=base_response,json=baseResponse,proto3" json:"base_response,omitempty"`
	GuildMembers map[int64]*GuildMember `protobuf:"bytes,2,rep,name=guild_members,json=guildMembers,proto3" json:"guild_members,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchGuildMemberResponse) Reset() {
	*x = FetchGuildMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildMemberResponse) ProtoMessage() {}

func (x *FetchGuildMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildMemberResponse.ProtoReflect.Descriptor instead.
func (*FetchGuildMemberResponse) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{18}
}

func (x *FetchGuildMemberResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FetchGuildMemberResponse) GetGuildMembers() map[int64]*GuildMember {
	if x != nil {
		return x.GuildMembers
	}
	return nil
}

type FetchGuildChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId    int64   `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	ChannelIds []int64 `protobuf:"varint,2,rep,packed,name=channel_ids,json=channelIds,proto3" json:"channel_ids,omitempty"`
}

func (x *FetchGuildChannelRequest) Reset() {
	*x = FetchGuildChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildChannelRequest) ProtoMessage() {}

func (x *FetchGuildChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildChannelRequest.ProtoReflect.Descriptor instead.
func (*FetchGuildChannelRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{19}
}

func (x *FetchGuildChannelRequest) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *FetchGuildChannelRequest) GetChannelIds() []int64 {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

type FetchGuildChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse      `protobuf:"bytes,1,opt,name=base_response,json=baseResponse,proto3" json:"base_response,omitempty"`
	Channels     map[int64]*Channel `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchGuildChannelResponse) Reset() {
	*x = FetchGuildChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildChannelResponse) ProtoMessage() {}

func (x *FetchGuildChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildChannelResponse.ProtoReflect.Descriptor instead.
func (*FetchGuildChannelResponse) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{20}
}

func (x *FetchGuildChannelResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FetchGuildChannelResponse) GetChannels() map[int64]*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

type FetchGuildRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId int64   `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	RoleIds []int64 `protobuf:"varint,2,rep,packed,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
}

func (x *FetchGuildRoleRequest) Reset() {
	*x = FetchGuildRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildRoleRequest) ProtoMessage() {}

func (x *FetchGuildRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildRoleRequest.ProtoReflect.Descriptor instead.
func (*FetchGuildRoleRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{21}
}

func (x *FetchGuildRoleRequest) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *FetchGuildRoleRequest) GetRoleIds() []int64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

type FetchGuildRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse   `protobuf:"bytes,1,opt,name=base_response,json=baseResponse,proto3" json:"base_response,omitempty"`
	Roles        map[int64]*Role `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchGuildRoleResponse) Reset() {
	*x = FetchGuildRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildRoleResponse) ProtoMessage() {}

func (x *FetchGuildRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildRoleResponse.ProtoReflect.Descriptor instead.
func (*FetchGuildRoleResponse) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{22}
}

func (x *FetchGuildRoleResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FetchGuildRoleResponse) GetRoles() map[int64]*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

type FetchGuildEmojiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId  int64   `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	EmojiIds []int64 `protobuf:"varint,2,rep,packed,name=emoji_ids,json=emojiIds,proto3" json:"emoji_ids,omitempty"`
}

func (x *FetchGuildEmojiRequest) Reset() {
	*x = FetchGuildEmojiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildEmojiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildEmojiRequest) ProtoMessage() {}

func (x *FetchGuildEmojiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildEmojiRequest.ProtoReflect.Descriptor instead.
func (*FetchGuildEmojiRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{23}
}

func (x *FetchGuildEmojiRequest) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *FetchGuildEmojiRequest) GetEmojiIds() []int64 {
	if x != nil {
		return x.EmojiIds
	}
	return nil
}

type FetchGuildEmojiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse    `protobuf:"bytes,1,opt,name=base_response,json=baseResponse,proto3" json:"base_response,omitempty"`
	Emojis       map[int64]*Emoji `protobuf:"bytes,2,rep,name=emojis,proto3" json:"emojis,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchGuildEmojiResponse) Reset() {
	*x = FetchGuildEmojiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildEmojiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildEmojiResponse) ProtoMessage() {}

func (x *FetchGuildEmojiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildEmojiResponse.ProtoReflect.Descriptor instead.
func (*FetchGuildEmojiResponse) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{24}
}

func (x *FetchGuildEmojiResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FetchGuildEmojiResponse) GetEmojis() map[int64]*Emoji {
	if x != nil {
		return x.Emojis
	}
	return nil
}

type FetchGuildStickerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId    int64   `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	StickerIds []int64 `protobuf:"varint,2,rep,packed,name=sticker_ids,json=stickerIds,proto3" json:"sticker_ids,omitempty"`
}

func (x *FetchGuildStickerRequest) Reset() {
	*x = FetchGuildStickerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildStickerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildStickerRequest) ProtoMessage() {}

func (x *FetchGuildStickerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildStickerRequest.ProtoReflect.Descriptor instead.
func (*FetchGuildStickerRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{25}
}

func (x *FetchGuildStickerRequest) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *FetchGuildStickerRequest) GetStickerIds() []int64 {
	if x != nil {
		return x.StickerIds
	}
	return nil
}

type FetchGuildStickerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse      `protobuf:"bytes,1,opt,name=base_response,json=baseResponse,proto3" json:"base_response,omitempty"`
	Stickers     map[int64]*Sticker `protobuf:"bytes,2,rep,name=stickers,proto3" json:"stickers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchGuildStickerResponse) Reset() {
	*x = FetchGuildStickerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildStickerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildStickerResponse) ProtoMessage() {}

func (x *FetchGuildStickerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildStickerResponse.ProtoReflect.Descriptor instead.
func (*FetchGuildStickerResponse) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{26}
}

func (x *FetchGuildStickerResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FetchGuildStickerResponse) GetStickers() map[int64]*Sticker {
	if x != nil {
		return x.Stickers
	}
	return nil
}

type FetchGuildVoiceStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId int64   `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	UserIds []int64 `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *FetchGuildVoiceStateRequest) Reset() {
	*x = FetchGuildVoiceStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildVoiceStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildVoiceStateRequest) ProtoMessage() {}

func (x *FetchGuildVoiceStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildVoiceStateRequest.ProtoReflect.Descriptor instead.
func (*FetchGuildVoiceStateRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{27}
}

func (x *FetchGuildVoiceStateRequest) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *FetchGuildVoiceStateRequest) GetUserIds() []int64 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type FetchGuildVoiceStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse         `protobuf:"bytes,1,opt,name=base_response,json=baseResponse,proto3" json:"base_response,omitempty"`
	VoiceStates  map[int64]*VoiceState `protobuf:"bytes,2,rep,name=voice_states,json=voiceStates,proto3" json:"voice_states,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchGuildVoiceStateResponse) Reset() {
	*x = FetchGuildVoiceStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGuildVoiceStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGuildVoiceStateResponse) ProtoMessage() {}

func (x *FetchGuildVoiceStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGuildVoiceStateResponse.ProtoReflect.Descriptor instead.
func (*FetchGuildVoiceStateResponse) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{28}
}

func (x *FetchGuildVoiceStateResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FetchGuildVoiceStateResponse) GetVoiceStates() map[int64]*VoiceState {
	if x != nil {
		return x.VoiceStates
	}
	return nil
}

type FetchUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []int64 `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *FetchUserRequest) Reset() {
	*x = FetchUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchUserRequest) ProtoMessage() {}

func (x *FetchUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchUserRequest.ProtoReflect.Descriptor instead.
func (*FetchUserRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{29}
}

func (x *FetchUserRequest) GetUserIds() []int64 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type FetchUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse   `protobuf:"bytes,1,opt,name=base_response,json=baseResponse,proto3" json:"base_response,omitempty"`
	Users        map[int64]*User `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchUserResponse) Reset() {
	*x = FetchUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchUserResponse) ProtoMessage() {}

func (x *FetchUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchUserResponse.ProtoReflect.Descriptor instead.
func (*FetchUserResponse) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{30}
}

func (x *FetchUserResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FetchUserResponse) GetUsers() map[int64]*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type FetchUserMutualGuildsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *FetchUserMutualGuildsRequest) Reset() {
	*x = FetchUserMutualGuildsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchUserMutualGuildsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchUserMutualGuildsRequest) ProtoMessage() {}

func (x *FetchUserMutualGuildsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchUserMutualGuildsRequest.ProtoReflect.Descriptor instead.
func (*FetchUserMutualGuildsRequest) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{31}
}

func (x *FetchUserMutualGuildsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type FetchUserMutualGuildsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse    `protobuf:"bytes,1,opt,name=base_response,json=baseResponse,proto3" json:"base_response,omitempty"`
	Guilds       map[int64]*Guild `protobuf:"bytes,2,rep,name=guilds,proto3" json:"guilds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchUserMutualGuildsResponse) Reset() {
	*x = FetchUserMutualGuildsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sandwich_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchUserMutualGuildsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchUserMutualGuildsResponse) ProtoMessage() {}

func (x *FetchUserMutualGuildsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sandwich_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchUserMutualGuildsResponse.ProtoReflect.Descriptor instead.
func (*FetchUserMutualGuildsResponse) Descriptor() ([]byte, []int) {
	return file_sandwich_proto_rawDescGZIP(), []int{32}
}

func (x *FetchUserMutualGuildsResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FetchUserMutualGuildsResponse) GetGuilds() map[int64]*Guild {
	if x != nil {
		return x.Guilds
	}
	return nil
}

var File_sandwich_proto protoreflect.FileDescriptor

var file_sandwich_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x1a, 0x0d, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2f, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x42, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x4e, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x76, 0x0a, 0x21, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x91, 0x02, 0x0a, 0x18, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5e, 0x0a,
	0x11, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x53,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x05,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x16,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x6f, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x6f, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a,
	0x15, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x5f, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75,
	0x74, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0xf8, 0x03, 0x0a, 0x13, 0x53, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x4a,
	0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x02, 0x0a, 0x05, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x75,
	0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61,
	0x7a, 0x79, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6c, 0x61, 0x7a, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x27, 0x0a,
	0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x58, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x5d, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x30, 0x0a, 0x13, 0x57, 0x68, 0x65, 0x72, 0x65, 0x49, 0x73, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x14, 0x57, 0x68, 0x65, 0x72, 0x65, 0x49, 0x73, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x49, 0x73, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5c, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x49, 0x73, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x57, 0x68, 0x65, 0x72, 0x65, 0x49, 0x73,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x2e, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x1a, 0x4a, 0x0a, 0x0b, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x56, 0x0a, 0x11, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x56, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x19, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x4e, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x48,
	0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x08, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x64, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x17, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x1a, 0x4a, 0x0a, 0x0b, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xf7,
	0x01, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x4e, 0x0a, 0x0d, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x1b, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x8d, 0x02,
	0x0a, 0x1c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x54, 0x0a, 0x10, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a,
	0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xd8, 0x01, 0x0a,
	0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x48, 0x0a,
	0x0a, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x1c, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xf5, 0x01, 0x0a, 0x1d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x75,
	0x74, 0x75, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4b, 0x0a, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x1a, 0x4a, 0x0a, 0x0b,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xca, 0x0d, 0x0a, 0x08, 0x53, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x12, 0x3f, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12,
	0x17, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x47, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x22, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x16,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x53, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x22, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0c, 0x57, 0x68, 0x65, 0x72, 0x65, 0x49, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1d,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x49,
	0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x49, 0x73,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x0a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1b, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x12, 0x20, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x22, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x25, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x09, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x15, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x75, 0x74, 0x75, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d,
	0x2f, 0x53, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2d, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sandwich_proto_rawDescOnce sync.Once
	file_sandwich_proto_rawDescData = file_sandwich_proto_rawDesc
)

func file_sandwich_proto_rawDescGZIP() []byte {
	file_sandwich_proto_rawDescOnce.Do(func() {
		file_sandwich_proto_rawDescData = protoimpl.X.CompressGZIP(file_sandwich_proto_rawDescData)
	})
	return file_sandwich_proto_rawDescData
}

var file_sandwich_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_sandwich_proto_goTypes = []interface{}{
	(*BaseResponse)(nil),                      // 0: sandwich.BaseResponse
	(*ListenRequest)(nil),                     // 1: sandwich.ListenRequest
	(*ListenResponse)(nil),                    // 2: sandwich.ListenResponse
	(*ApplicationIdentifier)(nil),             // 3: sandwich.ApplicationIdentifier
	(*ApplicationIdentifierWithBlocking)(nil), // 4: sandwich.ApplicationIdentifierWithBlocking
	(*FetchApplicationResponse)(nil),          // 5: sandwich.FetchApplicationResponse
	(*CreateApplicationRequest)(nil),          // 6: sandwich.CreateApplicationRequest
	(*SandwichApplication)(nil),               // 7: sandwich.SandwichApplication
	(*Shard)(nil),                             // 8: sandwich.Shard
	(*RequestGuildChunkRequest)(nil),          // 9: sandwich.RequestGuildChunkRequest
	(*SendWebsocketMessageRequest)(nil),       // 10: sandwich.SendWebsocketMessageRequest
	(*RelayMessageRequest)(nil),               // 11: sandwich.RelayMessageRequest
	(*WhereIsGuildRequest)(nil),               // 12: sandwich.WhereIsGuildRequest
	(*WhereIsGuildResponse)(nil),              // 13: sandwich.WhereIsGuildResponse
	(*WhereIsGuildLocation)(nil),              // 14: sandwich.WhereIsGuildLocation
	(*FetchGuildRequest)(nil),                 // 15: sandwich.FetchGuildRequest
	(*FetchGuildResponse)(nil),                // 16: sandwich.FetchGuildResponse
	(*FetchGuildMemberRequest)(nil),           // 17: sandwich.FetchGuildMemberRequest
	(*FetchGuildMemberResponse)(nil),          // 18: sandwich.FetchGuildMemberResponse
	(*FetchGuildChannelRequest)(nil),          // 19: sandwich.FetchGuildChannelRequest
	(*FetchGuildChannelResponse)(nil),         // 20: sandwich.FetchGuildChannelResponse
	(*FetchGuildRoleRequest)(nil),             // 21: sandwich.FetchGuildRoleRequest
	(*FetchGuildRoleResponse)(nil),            // 22: sandwich.FetchGuildRoleResponse
	(*FetchGuildEmojiRequest)(nil),            // 23: sandwich.FetchGuildEmojiRequest
	(*FetchGuildEmojiResponse)(nil),           // 24: sandwich.FetchGuildEmojiResponse
	(*FetchGuildStickerRequest)(nil),          // 25: sandwich.FetchGuildStickerRequest
	(*FetchGuildStickerResponse)(nil),         // 26: sandwich.FetchGuildStickerResponse
	(*FetchGuildVoiceStateRequest)(nil),       // 27: sandwich.FetchGuildVoiceStateRequest
	(*FetchGuildVoiceStateResponse)(nil),      // 28: sandwich.FetchGuildVoiceStateResponse
	(*FetchUserRequest)(nil),                  // 29: sandwich.FetchUserRequest
	(*FetchUserResponse)(nil),                 // 30: sandwich.FetchUserResponse
	(*FetchUserMutualGuildsRequest)(nil),      // 31: sandwich.FetchUserMutualGuildsRequest
	(*FetchUserMutualGuildsResponse)(nil),     // 32: sandwich.FetchUserMutualGuildsResponse
	nil,                                       // 33: sandwich.FetchApplicationResponse.ApplicationsEntry
	nil,                                       // 34: sandwich.SandwichApplication.ShardsEntry
	nil,                                       // 35: sandwich.WhereIsGuildResponse.LocationsEntry
	nil,                                       // 36: sandwich.FetchGuildResponse.GuildsEntry
	nil,                                       // 37: sandwich.FetchGuildMemberResponse.GuildMembersEntry
	nil,                                       // 38: sandwich.FetchGuildChannelResponse.ChannelsEntry
	nil,                                       // 39: sandwich.FetchGuildRoleResponse.RolesEntry
	nil,                                       // 40: sandwich.FetchGuildEmojiResponse.EmojisEntry
	nil,                                       // 41: sandwich.FetchGuildStickerResponse.StickersEntry
	nil,                                       // 42: sandwich.FetchGuildVoiceStateResponse.VoiceStatesEntry
	nil,                                       // 43: sandwich.FetchUserResponse.UsersEntry
	nil,                                       // 44: sandwich.FetchUserMutualGuildsResponse.GuildsEntry
	(*GuildMember)(nil),                       // 45: sandwich.GuildMember
	(*Guild)(nil),                             // 46: sandwich.Guild
	(*Channel)(nil),                           // 47: sandwich.Channel
	(*Role)(nil),                              // 48: sandwich.Role
	(*Emoji)(nil),                             // 49: sandwich.Emoji
	(*Sticker)(nil),                           // 50: sandwich.Sticker
	(*VoiceState)(nil),                        // 51: sandwich.VoiceState
	(*User)(nil),                              // 52: sandwich.User
	(*emptypb.Empty)(nil),                     // 53: google.protobuf.Empty
}
var file_sandwich_proto_depIdxs = []int32{
	0,  // 0: sandwich.FetchApplicationResponse.base_response:type_name -> sandwich.BaseResponse
	33, // 1: sandwich.FetchApplicationResponse.applications:type_name -> sandwich.FetchApplicationResponse.ApplicationsEntry
	34, // 2: sandwich.SandwichApplication.shards:type_name -> sandwich.SandwichApplication.ShardsEntry
	0,  // 3: sandwich.WhereIsGuildResponse.base_response:type_name -> sandwich.BaseResponse
	35, // 4: sandwich.WhereIsGuildResponse.locations:type_name -> sandwich.WhereIsGuildResponse.LocationsEntry
	45, // 5: sandwich.WhereIsGuildLocation.guild_member:type_name -> sandwich.GuildMember
	0,  // 6: sandwich.FetchGuildResponse.base_response:type_name -> sandwich.BaseResponse
	36, // 7: sandwich.FetchGuildResponse.guilds:type_name -> sandwich.FetchGuildResponse.GuildsEntry
	0,  // 8: sandwich.FetchGuildMemberResponse.base_response:type_name -> sandwich.BaseResponse
	37, // 9: sandwich.FetchGuildMemberResponse.guild_members:type_name -> sandwich.FetchGuildMemberResponse.GuildMembersEntry
	0,  // 10: sandwich.FetchGuildChannelResponse.base_response:type_name -> sandwich.BaseResponse
	38, // 11: sandwich.FetchGuildChannelResponse.channels:type_name -> sandwich.FetchGuildChannelResponse.ChannelsEntry
	0,  // 12: sandwich.FetchGuildRoleResponse.base_response:type_name -> sandwich.BaseResponse
	39, // 13: sandwich.FetchGuildRoleResponse.roles:type_name -> sandwich.FetchGuildRoleResponse.RolesEntry
	0,  // 14: sandwich.FetchGuildEmojiResponse.base_response:type_name -> sandwich.BaseResponse
	40, // 15: sandwich.FetchGuildEmojiResponse.emojis:type_name -> sandwich.FetchGuildEmojiResponse.EmojisEntry
	0,  // 16: sandwich.FetchGuildStickerResponse.base_response:type_name -> sandwich.BaseResponse
	41, // 17: sandwich.FetchGuildStickerResponse.stickers:type_name -> sandwich.FetchGuildStickerResponse.StickersEntry
	0,  // 18: sandwich.FetchGuildVoiceStateResponse.base_response:type_name -> sandwich.BaseResponse
	42, // 19: sandwich.FetchGuildVoiceStateResponse.voice_states:type_name -> sandwich.FetchGuildVoiceStateResponse.VoiceStatesEntry
	0,  // 20: sandwich.FetchUserResponse.base_response:type_name -> sandwich.BaseResponse
	43, // 21: sandwich.FetchUserResponse.users:type_name -> sandwich.FetchUserResponse.UsersEntry
	0,  // 22: sandwich.FetchUserMutualGuildsResponse.base_response:type_name -> sandwich.BaseResponse
	44, // 23: sandwich.FetchUserMutualGuildsResponse.guilds:type_name -> sandwich.FetchUserMutualGuildsResponse.GuildsEntry
	7,  // 24: sandwich.FetchApplicationResponse.ApplicationsEntry.value:type_name -> sandwich.SandwichApplication
	8,  // 25: sandwich.SandwichApplication.ShardsEntry.value:type_name -> sandwich.Shard
	14, // 26: sandwich.WhereIsGuildResponse.LocationsEntry.value:type_name -> sandwich.WhereIsGuildLocation
	46, // 27: sandwich.FetchGuildResponse.GuildsEntry.value:type_name -> sandwich.Guild
	45, // 28: sandwich.FetchGuildMemberResponse.GuildMembersEntry.value:type_name -> sandwich.GuildMember
	47, // 29: sandwich.FetchGuildChannelResponse.ChannelsEntry.value:type_name -> sandwich.Channel
	48, // 30: sandwich.FetchGuildRoleResponse.RolesEntry.value:type_name -> sandwich.Role
	49, // 31: sandwich.FetchGuildEmojiResponse.EmojisEntry.value:type_name -> sandwich.Emoji
	50, // 32: sandwich.FetchGuildStickerResponse.StickersEntry.value:type_name -> sandwich.Sticker
	51, // 33: sandwich.FetchGuildVoiceStateResponse.VoiceStatesEntry.value:type_name -> sandwich.VoiceState
	52, // 34: sandwich.FetchUserResponse.UsersEntry.value:type_name -> sandwich.User
	46, // 35: sandwich.FetchUserMutualGuildsResponse.GuildsEntry.value:type_name -> sandwich.Guild
	1,  // 36: sandwich.Sandwich.Listen:input_type -> sandwich.ListenRequest
	11, // 37: sandwich.Sandwich.RelayMessage:input_type -> sandwich.RelayMessageRequest
	53, // 38: sandwich.Sandwich.ReloadConfiguration:input_type -> google.protobuf.Empty
	3,  // 39: sandwich.Sandwich.FetchApplication:input_type -> sandwich.ApplicationIdentifier
	4,  // 40: sandwich.Sandwich.StartApplication:input_type -> sandwich.ApplicationIdentifierWithBlocking
	4,  // 41: sandwich.Sandwich.StopApplication:input_type -> sandwich.ApplicationIdentifierWithBlocking
	6,  // 42: sandwich.Sandwich.CreateApplication:input_type -> sandwich.CreateApplicationRequest
	3,  // 43: sandwich.Sandwich.DeleteApplication:input_type -> sandwich.ApplicationIdentifier
	9,  // 44: sandwich.Sandwich.RequestGuildChunk:input_type -> sandwich.RequestGuildChunkRequest
	10, // 45: sandwich.Sandwich.SendWebsocketMessage:input_type -> sandwich.SendWebsocketMessageRequest
	12, // 46: sandwich.Sandwich.WhereIsGuild:input_type -> sandwich.WhereIsGuildRequest
	15, // 47: sandwich.Sandwich.FetchGuild:input_type -> sandwich.FetchGuildRequest
	17, // 48: sandwich.Sandwich.FetchGuildMember:input_type -> sandwich.FetchGuildMemberRequest
	19, // 49: sandwich.Sandwich.FetchGuildChannel:input_type -> sandwich.FetchGuildChannelRequest
	21, // 50: sandwich.Sandwich.FetchGuildRole:input_type -> sandwich.FetchGuildRoleRequest
	23, // 51: sandwich.Sandwich.FetchGuildEmoji:input_type -> sandwich.FetchGuildEmojiRequest
	25, // 52: sandwich.Sandwich.FetchGuildSticker:input_type -> sandwich.FetchGuildStickerRequest
	27, // 53: sandwich.Sandwich.FetchGuildVoiceState:input_type -> sandwich.FetchGuildVoiceStateRequest
	29, // 54: sandwich.Sandwich.FetchUser:input_type -> sandwich.FetchUserRequest
	31, // 55: sandwich.Sandwich.FetchUserMutualGuilds:input_type -> sandwich.FetchUserMutualGuildsRequest
	2,  // 56: sandwich.Sandwich.Listen:output_type -> sandwich.ListenResponse
	0,  // 57: sandwich.Sandwich.RelayMessage:output_type -> sandwich.BaseResponse
	0,  // 58: sandwich.Sandwich.ReloadConfiguration:output_type -> sandwich.BaseResponse
	5,  // 59: sandwich.Sandwich.FetchApplication:output_type -> sandwich.FetchApplicationResponse
	0,  // 60: sandwich.Sandwich.StartApplication:output_type -> sandwich.BaseResponse
	0,  // 61: sandwich.Sandwich.StopApplication:output_type -> sandwich.BaseResponse
	7,  // 62: sandwich.Sandwich.CreateApplication:output_type -> sandwich.SandwichApplication
	0,  // 63: sandwich.Sandwich.DeleteApplication:output_type -> sandwich.BaseResponse
	0,  // 64: sandwich.Sandwich.RequestGuildChunk:output_type -> sandwich.BaseResponse
	0,  // 65: sandwich.Sandwich.SendWebsocketMessage:output_type -> sandwich.BaseResponse
	13, // 66: sandwich.Sandwich.WhereIsGuild:output_type -> sandwich.WhereIsGuildResponse
	16, // 67: sandwich.Sandwich.FetchGuild:output_type -> sandwich.FetchGuildResponse
	18, // 68: sandwich.Sandwich.FetchGuildMember:output_type -> sandwich.FetchGuildMemberResponse
	20, // 69: sandwich.Sandwich.FetchGuildChannel:output_type -> sandwich.FetchGuildChannelResponse
	22, // 70: sandwich.Sandwich.FetchGuildRole:output_type -> sandwich.FetchGuildRoleResponse
	24, // 71: sandwich.Sandwich.FetchGuildEmoji:output_type -> sandwich.FetchGuildEmojiResponse
	26, // 72: sandwich.Sandwich.FetchGuildSticker:output_type -> sandwich.FetchGuildStickerResponse
	28, // 73: sandwich.Sandwich.FetchGuildVoiceState:output_type -> sandwich.FetchGuildVoiceStateResponse
	30, // 74: sandwich.Sandwich.FetchUser:output_type -> sandwich.FetchUserResponse
	32, // 75: sandwich.Sandwich.FetchUserMutualGuilds:output_type -> sandwich.FetchUserMutualGuildsResponse
	56, // [56:76] is the sub-list for method output_type
	36, // [36:56] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_sandwich_proto_init() }
func file_sandwich_proto_init() {
	if File_sandwich_proto != nil {
		return
	}
	file_discord_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sandwich_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationIdentifierWithBlocking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SandwichApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGuildChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendWebsocketMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhereIsGuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhereIsGuildResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhereIsGuildLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildEmojiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildEmojiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildStickerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildStickerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildVoiceStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGuildVoiceStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchUserMutualGuildsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sandwich_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchUserMutualGuildsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sandwich_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sandwich_proto_goTypes,
		DependencyIndexes: file_sandwich_proto_depIdxs,
		MessageInfos:      file_sandwich_proto_msgTypes,
	}.Build()
	File_sandwich_proto = out.File
	file_sandwich_proto_rawDesc = nil
	file_sandwich_proto_goTypes = nil
	file_sandwich_proto_depIdxs = nil
}
