// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: sandwich.proto

package sandwich

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sandwich_Listen_FullMethodName                    = "/sandwich.Sandwich/Listen"
	Sandwich_RelayMessage_FullMethodName              = "/sandwich.Sandwich/RelayMessage"
	Sandwich_ReloadConfiguration_FullMethodName       = "/sandwich.Sandwich/ReloadConfiguration"
	Sandwich_FetchApplicationConfiguration_FullMethodName = "/sandwich.Sandwich/FetchApplicationConfiguration"
	Sandwich_RequestGuildChunk_FullMethodName         = "/sandwich.Sandwich/RequestGuildChunk"
	Sandwich_SendWebsocketMessage_FullMethodName      = "/sandwich.Sandwich/SendWebsocketMessage"
	Sandwich_WhereIsGuild_FullMethodName              = "/sandwich.Sandwich/WhereIsGuild"
	Sandwich_FetchGuild_FullMethodName                = "/sandwich.Sandwich/FetchGuild"
	Sandwich_FetchGuildMember_FullMethodName          = "/sandwich.Sandwich/FetchGuildMember"
	Sandwich_FetchGuildChannel_FullMethodName         = "/sandwich.Sandwich/FetchGuildChannel"
	Sandwich_FetchGuildRole_FullMethodName            = "/sandwich.Sandwich/FetchGuildRole"
	Sandwich_FetchGuildEmoji_FullMethodName           = "/sandwich.Sandwich/FetchGuildEmoji"
	Sandwich_FetchGuildSticker_FullMethodName         = "/sandwich.Sandwich/FetchGuildSticker"
	Sandwich_FetchGuildVoiceState_FullMethodName      = "/sandwich.Sandwich/FetchGuildVoiceState"
	Sandwich_FetchUser_FullMethodName                 = "/sandwich.Sandwich/FetchUser"
	Sandwich_FetchUserMutualGuilds_FullMethodName     = "/sandwich.Sandwich/FetchUserMutualGuilds"
	Sandwich_FetchVoiceState_FullMethodName           = "/sandwich.Sandwich/FetchVoiceState"
)

// SandwichClient is the client API for Sandwich service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SandwichClient interface {
	// Listen delivers information to Applications.
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListenResponse], error)
	// RelayMessage creates a new event and sends it immediately back to Applications.
	RelayMessage(ctx context.Context, in *RelayMessageRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	// ReloadConfiguration reloads the configuration.
	ReloadConfiguration(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BaseResponse, error)
	// FetchApplicationConfiguration returns the Application Configuration.
	FetchApplicationConfiguration(ctx context.Context, in *FetchApplicationConfigurationRequest, opts ...grpc.CallOption) (*FetchApplicationConfigurationResponse, error)
	// RequestGuildChunk requests a guild chunk.
	RequestGuildChunk(ctx context.Context, in *RequestGuildChunkRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	// SendWebsocketMessage sends a websocket message to discord from a specific shard.
	SendWebsocketMessage(ctx context.Context, in *SendWebsocketMessageRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	// WhereIsGuild returns a list of WhereIsGuildLocations based on guildId.
	WhereIsGuild(ctx context.Context, in *WhereIsGuildRequest, opts ...grpc.CallOption) (*WhereIsGuildResponse, error)
	FetchGuild(ctx context.Context, in *FetchGuildRequest, opts ...grpc.CallOption) (*FetchGuildResponse, error)
	FetchGuildMember(ctx context.Context, in *FetchGuildMemberRequest, opts ...grpc.CallOption) (*FetchGuildMemberResponse, error)
	FetchGuildChannel(ctx context.Context, in *FetchGuildChannelRequest, opts ...grpc.CallOption) (*FetchGuildChannelResponse, error)
	FetchGuildRole(ctx context.Context, in *FetchGuildRoleRequest, opts ...grpc.CallOption) (*FetchGuildRoleResponse, error)
	FetchGuildEmoji(ctx context.Context, in *FetchGuildEmojiRequest, opts ...grpc.CallOption) (*FetchGuildEmojiResponse, error)
	FetchGuildSticker(ctx context.Context, in *FetchGuildStickerRequest, opts ...grpc.CallOption) (*FetchGuildStickerResponse, error)
	FetchGuildVoiceState(ctx context.Context, in *FetchGuildVoiceStateRequest, opts ...grpc.CallOption) (*FetchGuildVoiceStateResponse, error)
	FetchUser(ctx context.Context, in *FetchUserRequest, opts ...grpc.CallOption) (*FetchUserResponse, error)
	FetchUserMutualGuilds(ctx context.Context, in *FetchUserMutualGuildsRequest, opts ...grpc.CallOption) (*FetchUserMutualGuildsResponse, error)
	FetchVoiceState(ctx context.Context, in *FetchVoiceStateRequest, opts ...grpc.CallOption) (*FetchVoiceStateResponse, error)
}

type sandwichClient struct {
	cc grpc.ClientConnInterface
}

func NewSandwichClient(cc grpc.ClientConnInterface) SandwichClient {
	return &sandwichClient{cc}
}

func (c *sandwichClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListenResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Sandwich_ServiceDesc.Streams[0], Sandwich_Listen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListenRequest, ListenResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sandwich_ListenClient = grpc.ServerStreamingClient[ListenResponse]

func (c *sandwichClient) RelayMessage(ctx context.Context, in *RelayMessageRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, Sandwich_RelayMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) ReloadConfiguration(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, Sandwich_ReloadConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) FetchApplicationConfiguration(ctx context.Context, in *FetchApplicationConfigurationRequest, opts ...grpc.CallOption) (*FetchApplicationConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchApplicationConfigurationResponse)
	err := c.cc.Invoke(ctx, Sandwich_FetchApplicationConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) RequestGuildChunk(ctx context.Context, in *RequestGuildChunkRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, Sandwich_RequestGuildChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) SendWebsocketMessage(ctx context.Context, in *SendWebsocketMessageRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, Sandwich_SendWebsocketMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) WhereIsGuild(ctx context.Context, in *WhereIsGuildRequest, opts ...grpc.CallOption) (*WhereIsGuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhereIsGuildResponse)
	err := c.cc.Invoke(ctx, Sandwich_WhereIsGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) FetchGuild(ctx context.Context, in *FetchGuildRequest, opts ...grpc.CallOption) (*FetchGuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchGuildResponse)
	err := c.cc.Invoke(ctx, Sandwich_FetchGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) FetchGuildMember(ctx context.Context, in *FetchGuildMemberRequest, opts ...grpc.CallOption) (*FetchGuildMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchGuildMemberResponse)
	err := c.cc.Invoke(ctx, Sandwich_FetchGuildMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) FetchGuildChannel(ctx context.Context, in *FetchGuildChannelRequest, opts ...grpc.CallOption) (*FetchGuildChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchGuildChannelResponse)
	err := c.cc.Invoke(ctx, Sandwich_FetchGuildChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) FetchGuildRole(ctx context.Context, in *FetchGuildRoleRequest, opts ...grpc.CallOption) (*FetchGuildRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchGuildRoleResponse)
	err := c.cc.Invoke(ctx, Sandwich_FetchGuildRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) FetchGuildEmoji(ctx context.Context, in *FetchGuildEmojiRequest, opts ...grpc.CallOption) (*FetchGuildEmojiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchGuildEmojiResponse)
	err := c.cc.Invoke(ctx, Sandwich_FetchGuildEmoji_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) FetchGuildSticker(ctx context.Context, in *FetchGuildStickerRequest, opts ...grpc.CallOption) (*FetchGuildStickerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchGuildStickerResponse)
	err := c.cc.Invoke(ctx, Sandwich_FetchGuildSticker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) FetchGuildVoiceState(ctx context.Context, in *FetchGuildVoiceStateRequest, opts ...grpc.CallOption) (*FetchGuildVoiceStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchGuildVoiceStateResponse)
	err := c.cc.Invoke(ctx, Sandwich_FetchGuildVoiceState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) FetchUser(ctx context.Context, in *FetchUserRequest, opts ...grpc.CallOption) (*FetchUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchUserResponse)
	err := c.cc.Invoke(ctx, Sandwich_FetchUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) FetchUserMutualGuilds(ctx context.Context, in *FetchUserMutualGuildsRequest, opts ...grpc.CallOption) (*FetchUserMutualGuildsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchUserMutualGuildsResponse)
	err := c.cc.Invoke(ctx, Sandwich_FetchUserMutualGuilds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandwichClient) FetchVoiceState(ctx context.Context, in *FetchVoiceStateRequest, opts ...grpc.CallOption) (*FetchVoiceStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchVoiceStateResponse)
	err := c.cc.Invoke(ctx, Sandwich_FetchVoiceState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SandwichServer is the server API for Sandwich service.
// All implementations must embed UnimplementedSandwichServer
// for forward compatibility.
type SandwichServer interface {
	// Listen delivers information to Applications.
	Listen(*ListenRequest, grpc.ServerStreamingServer[ListenResponse]) error
	// RelayMessage creates a new event and sends it immediately back to Applications.
	RelayMessage(context.Context, *RelayMessageRequest) (*BaseResponse, error)
	// ReloadConfiguration reloads the configuration.
	ReloadConfiguration(context.Context, *empty.Empty) (*BaseResponse, error)
	// FetchApplicationConfiguration returns the Application Configuration.
	FetchApplicationConfiguration(context.Context, *FetchApplicationConfigurationRequest) (*FetchApplicationConfigurationResponse, error)
	// RequestGuildChunk requests a guild chunk.
	RequestGuildChunk(context.Context, *RequestGuildChunkRequest) (*BaseResponse, error)
	// SendWebsocketMessage sends a websocket message to discord from a specific shard.
	SendWebsocketMessage(context.Context, *SendWebsocketMessageRequest) (*BaseResponse, error)
	// WhereIsGuild returns a list of WhereIsGuildLocations based on guildId.
	WhereIsGuild(context.Context, *WhereIsGuildRequest) (*WhereIsGuildResponse, error)
	FetchGuild(context.Context, *FetchGuildRequest) (*FetchGuildResponse, error)
	FetchGuildMember(context.Context, *FetchGuildMemberRequest) (*FetchGuildMemberResponse, error)
	FetchGuildChannel(context.Context, *FetchGuildChannelRequest) (*FetchGuildChannelResponse, error)
	FetchGuildRole(context.Context, *FetchGuildRoleRequest) (*FetchGuildRoleResponse, error)
	FetchGuildEmoji(context.Context, *FetchGuildEmojiRequest) (*FetchGuildEmojiResponse, error)
	FetchGuildSticker(context.Context, *FetchGuildStickerRequest) (*FetchGuildStickerResponse, error)
	FetchGuildVoiceState(context.Context, *FetchGuildVoiceStateRequest) (*FetchGuildVoiceStateResponse, error)
	FetchUser(context.Context, *FetchUserRequest) (*FetchUserResponse, error)
	FetchUserMutualGuilds(context.Context, *FetchUserMutualGuildsRequest) (*FetchUserMutualGuildsResponse, error)
	FetchVoiceState(context.Context, *FetchVoiceStateRequest) (*FetchVoiceStateResponse, error)
	mustEmbedUnimplementedSandwichServer()
}

// UnimplementedSandwichServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSandwichServer struct{}

func (UnimplementedSandwichServer) Listen(*ListenRequest, grpc.ServerStreamingServer[ListenResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedSandwichServer) RelayMessage(context.Context, *RelayMessageRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayMessage not implemented")
}
func (UnimplementedSandwichServer) ReloadConfiguration(context.Context, *empty.Empty) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadConfiguration not implemented")
}
func (UnimplementedSandwichServer) FetchApplicationConfiguration(context.Context, *FetchApplicationConfigurationRequest) (*FetchApplicationConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchApplicationConfiguration not implemented")
}
func (UnimplementedSandwichServer) RequestGuildChunk(context.Context, *RequestGuildChunkRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestGuildChunk not implemented")
}
func (UnimplementedSandwichServer) SendWebsocketMessage(context.Context, *SendWebsocketMessageRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWebsocketMessage not implemented")
}
func (UnimplementedSandwichServer) WhereIsGuild(context.Context, *WhereIsGuildRequest) (*WhereIsGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhereIsGuild not implemented")
}
func (UnimplementedSandwichServer) FetchGuild(context.Context, *FetchGuildRequest) (*FetchGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGuild not implemented")
}
func (UnimplementedSandwichServer) FetchGuildMember(context.Context, *FetchGuildMemberRequest) (*FetchGuildMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGuildMember not implemented")
}
func (UnimplementedSandwichServer) FetchGuildChannel(context.Context, *FetchGuildChannelRequest) (*FetchGuildChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGuildChannel not implemented")
}
func (UnimplementedSandwichServer) FetchGuildRole(context.Context, *FetchGuildRoleRequest) (*FetchGuildRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGuildRole not implemented")
}
func (UnimplementedSandwichServer) FetchGuildEmoji(context.Context, *FetchGuildEmojiRequest) (*FetchGuildEmojiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGuildEmoji not implemented")
}
func (UnimplementedSandwichServer) FetchGuildSticker(context.Context, *FetchGuildStickerRequest) (*FetchGuildStickerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGuildSticker not implemented")
}
func (UnimplementedSandwichServer) FetchGuildVoiceState(context.Context, *FetchGuildVoiceStateRequest) (*FetchGuildVoiceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGuildVoiceState not implemented")
}
func (UnimplementedSandwichServer) FetchUser(context.Context, *FetchUserRequest) (*FetchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUser not implemented")
}
func (UnimplementedSandwichServer) FetchUserMutualGuilds(context.Context, *FetchUserMutualGuildsRequest) (*FetchUserMutualGuildsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUserMutualGuilds not implemented")
}
func (UnimplementedSandwichServer) FetchVoiceState(context.Context, *FetchVoiceStateRequest) (*FetchVoiceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchVoiceState not implemented")
}
func (UnimplementedSandwichServer) mustEmbedUnimplementedSandwichServer() {}
func (UnimplementedSandwichServer) testEmbeddedByValue()                  {}

// UnsafeSandwichServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SandwichServer will
// result in compilation errors.
type UnsafeSandwichServer interface {
	mustEmbedUnimplementedSandwichServer()
}

func RegisterSandwichServer(s grpc.ServiceRegistrar, srv SandwichServer) {
	// If the following call pancis, it indicates UnimplementedSandwichServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sandwich_ServiceDesc, srv)
}

func _Sandwich_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SandwichServer).Listen(m, &grpc.GenericServerStream[ListenRequest, ListenResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sandwich_ListenServer = grpc.ServerStreamingServer[ListenResponse]

func _Sandwich_RelayMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).RelayMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_RelayMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).RelayMessage(ctx, req.(*RelayMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_ReloadConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).ReloadConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_ReloadConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).ReloadConfiguration(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_FetchApplicationConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchApplicationConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).FetchApplicationConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_FetchApplicationConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).FetchApplicationConfiguration(ctx, req.(*FetchApplicationConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_RequestGuildChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGuildChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).RequestGuildChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_RequestGuildChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).RequestGuildChunk(ctx, req.(*RequestGuildChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_SendWebsocketMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWebsocketMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).SendWebsocketMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_SendWebsocketMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).SendWebsocketMessage(ctx, req.(*SendWebsocketMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_WhereIsGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhereIsGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).WhereIsGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_WhereIsGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).WhereIsGuild(ctx, req.(*WhereIsGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_FetchGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).FetchGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_FetchGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).FetchGuild(ctx, req.(*FetchGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_FetchGuildMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGuildMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).FetchGuildMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_FetchGuildMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).FetchGuildMember(ctx, req.(*FetchGuildMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_FetchGuildChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGuildChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).FetchGuildChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_FetchGuildChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).FetchGuildChannel(ctx, req.(*FetchGuildChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_FetchGuildRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGuildRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).FetchGuildRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_FetchGuildRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).FetchGuildRole(ctx, req.(*FetchGuildRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_FetchGuildEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGuildEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).FetchGuildEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_FetchGuildEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).FetchGuildEmoji(ctx, req.(*FetchGuildEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_FetchGuildSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGuildStickerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).FetchGuildSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_FetchGuildSticker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).FetchGuildSticker(ctx, req.(*FetchGuildStickerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_FetchGuildVoiceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGuildVoiceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).FetchGuildVoiceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_FetchGuildVoiceState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).FetchGuildVoiceState(ctx, req.(*FetchGuildVoiceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_FetchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).FetchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_FetchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).FetchUser(ctx, req.(*FetchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_FetchUserMutualGuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUserMutualGuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).FetchUserMutualGuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_FetchUserMutualGuilds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).FetchUserMutualGuilds(ctx, req.(*FetchUserMutualGuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandwich_FetchVoiceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchVoiceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandwichServer).FetchVoiceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sandwich_FetchVoiceState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandwichServer).FetchVoiceState(ctx, req.(*FetchVoiceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sandwich_ServiceDesc is the grpc.ServiceDesc for Sandwich service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sandwich_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sandwich.Sandwich",
	HandlerType: (*SandwichServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelayMessage",
			Handler:    _Sandwich_RelayMessage_Handler,
		},
		{
			MethodName: "ReloadConfiguration",
			Handler:    _Sandwich_ReloadConfiguration_Handler,
		},
		{
			MethodName: "FetchApplicationConfiguration",
			Handler:    _Sandwich_FetchApplicationConfiguration_Handler,
		},
		{
			MethodName: "RequestGuildChunk",
			Handler:    _Sandwich_RequestGuildChunk_Handler,
		},
		{
			MethodName: "SendWebsocketMessage",
			Handler:    _Sandwich_SendWebsocketMessage_Handler,
		},
		{
			MethodName: "WhereIsGuild",
			Handler:    _Sandwich_WhereIsGuild_Handler,
		},
		{
			MethodName: "FetchGuild",
			Handler:    _Sandwich_FetchGuild_Handler,
		},
		{
			MethodName: "FetchGuildMember",
			Handler:    _Sandwich_FetchGuildMember_Handler,
		},
		{
			MethodName: "FetchGuildChannel",
			Handler:    _Sandwich_FetchGuildChannel_Handler,
		},
		{
			MethodName: "FetchGuildRole",
			Handler:    _Sandwich_FetchGuildRole_Handler,
		},
		{
			MethodName: "FetchGuildEmoji",
			Handler:    _Sandwich_FetchGuildEmoji_Handler,
		},
		{
			MethodName: "FetchGuildSticker",
			Handler:    _Sandwich_FetchGuildSticker_Handler,
		},
		{
			MethodName: "FetchGuildVoiceState",
			Handler:    _Sandwich_FetchGuildVoiceState_Handler,
		},
		{
			MethodName: "FetchUser",
			Handler:    _Sandwich_FetchUser_Handler,
		},
		{
			MethodName: "FetchUserMutualGuilds",
			Handler:    _Sandwich_FetchUserMutualGuilds_Handler,
		},
		{
			MethodName: "FetchVoiceState",
			Handler:    _Sandwich_FetchVoiceState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Sandwich_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sandwich.proto",
}
