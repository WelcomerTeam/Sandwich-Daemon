// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: discord.proto

package sandwich

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  int64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                string           `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Icon                string           `protobuf:"bytes,3,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Description         string           `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	RPCOrigins          []string         `protobuf:"bytes,5,rep,name=RPCOrigins,proto3" json:"RPCOrigins,omitempty"`
	BotPublic           bool             `protobuf:"varint,6,opt,name=BotPublic,proto3" json:"BotPublic,omitempty"`
	BotRequireCodeGrant bool             `protobuf:"varint,7,opt,name=BotRequireCodeGrant,proto3" json:"BotRequireCodeGrant,omitempty"`
	TermsOfServiceURL   string           `protobuf:"bytes,8,opt,name=TermsOfServiceURL,proto3" json:"TermsOfServiceURL,omitempty"`
	PrivacyPolicyURL    string           `protobuf:"bytes,9,opt,name=PrivacyPolicyURL,proto3" json:"PrivacyPolicyURL,omitempty"`
	Owner               *User            `protobuf:"bytes,10,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Summary             string           `protobuf:"bytes,11,opt,name=Summary,proto3" json:"Summary,omitempty"`
	VerifyKey           string           `protobuf:"bytes,12,opt,name=VerifyKey,proto3" json:"VerifyKey,omitempty"`
	Team                *ApplicationTeam `protobuf:"bytes,13,opt,name=Team,proto3" json:"Team,omitempty"`
	GuildID             int64            `protobuf:"varint,14,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	PrimarySKUID        int64            `protobuf:"varint,15,opt,name=PrimarySKUID,proto3" json:"PrimarySKUID,omitempty"`
	Slug                string           `protobuf:"bytes,16,opt,name=Slug,proto3" json:"Slug,omitempty"`
	CoverImage          string           `protobuf:"bytes,17,opt,name=CoverImage,proto3" json:"CoverImage,omitempty"`
	Flags               int32            `protobuf:"varint,18,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Bot                 *User            `protobuf:"bytes,19,opt,name=Bot,proto3" json:"Bot,omitempty"`
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{0}
}

func (x *Application) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Application) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Application) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Application) GetRPCOrigins() []string {
	if x != nil {
		return x.RPCOrigins
	}
	return nil
}

func (x *Application) GetBotPublic() bool {
	if x != nil {
		return x.BotPublic
	}
	return false
}

func (x *Application) GetBotRequireCodeGrant() bool {
	if x != nil {
		return x.BotRequireCodeGrant
	}
	return false
}

func (x *Application) GetTermsOfServiceURL() string {
	if x != nil {
		return x.TermsOfServiceURL
	}
	return ""
}

func (x *Application) GetPrivacyPolicyURL() string {
	if x != nil {
		return x.PrivacyPolicyURL
	}
	return ""
}

func (x *Application) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Application) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Application) GetVerifyKey() string {
	if x != nil {
		return x.VerifyKey
	}
	return ""
}

func (x *Application) GetTeam() *ApplicationTeam {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *Application) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Application) GetPrimarySKUID() int64 {
	if x != nil {
		return x.PrimarySKUID
	}
	return 0
}

func (x *Application) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Application) GetCoverImage() string {
	if x != nil {
		return x.CoverImage
	}
	return ""
}

func (x *Application) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Application) GetBot() *User {
	if x != nil {
		return x.Bot
	}
	return nil
}

type ApplicationTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon        string                   `protobuf:"bytes,1,opt,name=Icon,proto3" json:"Icon,omitempty"`
	ID          int64                    `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Members     []*ApplicationTeamMember `protobuf:"bytes,3,rep,name=Members,proto3" json:"Members,omitempty"`
	Name        string                   `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	OwnerUserID int64                    `protobuf:"varint,5,opt,name=OwnerUserID,proto3" json:"OwnerUserID,omitempty"`
}

func (x *ApplicationTeam) Reset() {
	*x = ApplicationTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationTeam) ProtoMessage() {}

func (x *ApplicationTeam) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationTeam.ProtoReflect.Descriptor instead.
func (*ApplicationTeam) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{1}
}

func (x *ApplicationTeam) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ApplicationTeam) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ApplicationTeam) GetMembers() []*ApplicationTeamMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ApplicationTeam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationTeam) GetOwnerUserID() int64 {
	if x != nil {
		return x.OwnerUserID
	}
	return 0
}

type ApplicationTeamMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MembershipState uint32   `protobuf:"varint,1,opt,name=MembershipState,proto3" json:"MembershipState,omitempty"`
	Permissions     []string `protobuf:"bytes,2,rep,name=Permissions,proto3" json:"Permissions,omitempty"`
	TeamID          int64    `protobuf:"varint,3,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	User            *User    `protobuf:"bytes,4,opt,name=User,proto3" json:"User,omitempty"`
}

func (x *ApplicationTeamMember) Reset() {
	*x = ApplicationTeamMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationTeamMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationTeamMember) ProtoMessage() {}

func (x *ApplicationTeamMember) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationTeamMember.ProtoReflect.Descriptor instead.
func (*ApplicationTeamMember) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{2}
}

func (x *ApplicationTeamMember) GetMembershipState() uint32 {
	if x != nil {
		return x.MembershipState
	}
	return 0
}

func (x *ApplicationTeamMember) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *ApplicationTeamMember) GetTeamID() int64 {
	if x != nil {
		return x.TeamID
	}
	return 0
}

func (x *ApplicationTeamMember) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type ApplicationCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type              uint32                      `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	ApplicationID     int64                       `protobuf:"varint,3,opt,name=ApplicationID,proto3" json:"ApplicationID,omitempty"`
	GuildID           int64                       `protobuf:"varint,4,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	Name              string                      `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	Description       string                      `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	Options           []*ApplicationCommandOption `protobuf:"bytes,7,rep,name=Options,proto3" json:"Options,omitempty"`
	DefaultPermission bool                        `protobuf:"varint,8,opt,name=DefaultPermission,proto3" json:"DefaultPermission,omitempty"`
	Version           int32                       `protobuf:"varint,9,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *ApplicationCommand) Reset() {
	*x = ApplicationCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommand) ProtoMessage() {}

func (x *ApplicationCommand) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommand.ProtoReflect.Descriptor instead.
func (*ApplicationCommand) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{3}
}

func (x *ApplicationCommand) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ApplicationCommand) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ApplicationCommand) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *ApplicationCommand) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *ApplicationCommand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationCommand) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApplicationCommand) GetOptions() []*ApplicationCommandOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ApplicationCommand) GetDefaultPermission() bool {
	if x != nil {
		return x.DefaultPermission
	}
	return false
}

func (x *ApplicationCommand) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GuildApplicationCommandPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64                            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ApplicationID int64                            `protobuf:"varint,2,opt,name=ApplicationID,proto3" json:"ApplicationID,omitempty"`
	GuildID       int64                            `protobuf:"varint,3,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	Permissions   []*ApplicationCommandPermissions `protobuf:"bytes,4,rep,name=Permissions,proto3" json:"Permissions,omitempty"`
}

func (x *GuildApplicationCommandPermissions) Reset() {
	*x = GuildApplicationCommandPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildApplicationCommandPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildApplicationCommandPermissions) ProtoMessage() {}

func (x *GuildApplicationCommandPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildApplicationCommandPermissions.ProtoReflect.Descriptor instead.
func (*GuildApplicationCommandPermissions) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{4}
}

func (x *GuildApplicationCommandPermissions) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GuildApplicationCommandPermissions) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *GuildApplicationCommandPermissions) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *GuildApplicationCommandPermissions) GetPermissions() []*ApplicationCommandPermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type ApplicationCommandPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type    uint32 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Allowed bool   `protobuf:"varint,3,opt,name=Allowed,proto3" json:"Allowed,omitempty"`
}

func (x *ApplicationCommandPermissions) Reset() {
	*x = ApplicationCommandPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationCommandPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommandPermissions) ProtoMessage() {}

func (x *ApplicationCommandPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommandPermissions.ProtoReflect.Descriptor instead.
func (*ApplicationCommandPermissions) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{5}
}

func (x *ApplicationCommandPermissions) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ApplicationCommandPermissions) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ApplicationCommandPermissions) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

type ApplicationCommandOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         uint32                            `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Name         string                            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description  string                            `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Required     bool                              `protobuf:"varint,4,opt,name=Required,proto3" json:"Required,omitempty"`
	Choices      []*ApplicationCommandOptionChoice `protobuf:"bytes,5,rep,name=Choices,proto3" json:"Choices,omitempty"`
	Options      []*ApplicationCommandOption       `protobuf:"bytes,6,rep,name=Options,proto3" json:"Options,omitempty"`
	ChannelTypes []uint32                          `protobuf:"varint,7,rep,packed,name=ChannelTypes,proto3" json:"ChannelTypes,omitempty"`
	MinValue     int32                             `protobuf:"varint,8,opt,name=MinValue,proto3" json:"MinValue,omitempty"`
	MaxValue     int32                             `protobuf:"varint,9,opt,name=MaxValue,proto3" json:"MaxValue,omitempty"`
	Autocomplete bool                              `protobuf:"varint,10,opt,name=Autocomplete,proto3" json:"Autocomplete,omitempty"`
}

func (x *ApplicationCommandOption) Reset() {
	*x = ApplicationCommandOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationCommandOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommandOption) ProtoMessage() {}

func (x *ApplicationCommandOption) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommandOption.ProtoReflect.Descriptor instead.
func (*ApplicationCommandOption) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{6}
}

func (x *ApplicationCommandOption) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ApplicationCommandOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationCommandOption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApplicationCommandOption) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *ApplicationCommandOption) GetChoices() []*ApplicationCommandOptionChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *ApplicationCommandOption) GetOptions() []*ApplicationCommandOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ApplicationCommandOption) GetChannelTypes() []uint32 {
	if x != nil {
		return x.ChannelTypes
	}
	return nil
}

func (x *ApplicationCommandOption) GetMinValue() int32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *ApplicationCommandOption) GetMaxValue() int32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *ApplicationCommandOption) GetAutocomplete() bool {
	if x != nil {
		return x.Autocomplete
	}
	return false
}

type ApplicationCommandOptionChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ApplicationCommandOptionChoice) Reset() {
	*x = ApplicationCommandOptionChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationCommandOptionChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommandOptionChoice) ProtoMessage() {}

func (x *ApplicationCommandOptionChoice) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommandOptionChoice.ProtoReflect.Descriptor instead.
func (*ApplicationCommandOptionChoice) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{7}
}

func (x *ApplicationCommandOptionChoice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationCommandOptionChoice) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Interaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ApplicationID int64            `protobuf:"varint,2,opt,name=ApplicationID,proto3" json:"ApplicationID,omitempty"`
	Type          uint32           `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Data          *InteractionData `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	GuildID       int64            `protobuf:"varint,5,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	ChannelID     int64            `protobuf:"varint,6,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Member        *GuildMember     `protobuf:"bytes,7,opt,name=Member,proto3" json:"Member,omitempty"`
	User          *User            `protobuf:"bytes,8,opt,name=User,proto3" json:"User,omitempty"`
	Token         string           `protobuf:"bytes,9,opt,name=Token,proto3" json:"Token,omitempty"`
	Version       int32            `protobuf:"varint,10,opt,name=Version,proto3" json:"Version,omitempty"`
	Message       *Message         `protobuf:"bytes,11,opt,name=Message,proto3" json:"Message,omitempty"`
	Locale        string           `protobuf:"bytes,12,opt,name=Locale,proto3" json:"Locale,omitempty"`
	GuildLocale   string           `protobuf:"bytes,13,opt,name=GuildLocale,proto3" json:"GuildLocale,omitempty"`
}

func (x *Interaction) Reset() {
	*x = Interaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interaction) ProtoMessage() {}

func (x *Interaction) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interaction.ProtoReflect.Descriptor instead.
func (*Interaction) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{8}
}

func (x *Interaction) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Interaction) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *Interaction) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Interaction) GetData() *InteractionData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Interaction) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Interaction) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *Interaction) GetMember() *GuildMember {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Interaction) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Interaction) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Interaction) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Interaction) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Interaction) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Interaction) GetGuildLocale() string {
	if x != nil {
		return x.GuildLocale
	}
	return ""
}

type InteractionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64                      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                     `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Type          uint32                     `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Resolved      *InteractionResolvedData   `protobuf:"bytes,4,opt,name=Resolved,proto3" json:"Resolved,omitempty"`
	Options       []*InteractionDataOption   `protobuf:"bytes,5,rep,name=Options,proto3" json:"Options,omitempty"`
	CustomID      string                     `protobuf:"bytes,6,opt,name=CustomID,proto3" json:"CustomID,omitempty"`
	ComponentType uint32                     `protobuf:"varint,7,opt,name=ComponentType,proto3" json:"ComponentType,omitempty"`
	Values        []*ApplicationSelectOption `protobuf:"bytes,8,rep,name=Values,proto3" json:"Values,omitempty"`
	TargetID      int64                      `protobuf:"varint,9,opt,name=TargetID,proto3" json:"TargetID,omitempty"`
}

func (x *InteractionData) Reset() {
	*x = InteractionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionData) ProtoMessage() {}

func (x *InteractionData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionData.ProtoReflect.Descriptor instead.
func (*InteractionData) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{9}
}

func (x *InteractionData) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *InteractionData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InteractionData) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *InteractionData) GetResolved() *InteractionResolvedData {
	if x != nil {
		return x.Resolved
	}
	return nil
}

func (x *InteractionData) GetOptions() []*InteractionDataOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *InteractionData) GetCustomID() string {
	if x != nil {
		return x.CustomID
	}
	return ""
}

func (x *InteractionData) GetComponentType() uint32 {
	if x != nil {
		return x.ComponentType
	}
	return 0
}

func (x *InteractionData) GetValues() []*ApplicationSelectOption {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *InteractionData) GetTargetID() int64 {
	if x != nil {
		return x.TargetID
	}
	return 0
}

type InteractionDataOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type    uint32                   `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Value   []byte                   `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	Options []*InteractionDataOption `protobuf:"bytes,4,rep,name=Options,proto3" json:"Options,omitempty"`
	Focused bool                     `protobuf:"varint,5,opt,name=Focused,proto3" json:"Focused,omitempty"`
}

func (x *InteractionDataOption) Reset() {
	*x = InteractionDataOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionDataOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionDataOption) ProtoMessage() {}

func (x *InteractionDataOption) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionDataOption.ProtoReflect.Descriptor instead.
func (*InteractionDataOption) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{10}
}

func (x *InteractionDataOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InteractionDataOption) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *InteractionDataOption) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InteractionDataOption) GetOptions() []*InteractionDataOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *InteractionDataOption) GetFocused() bool {
	if x != nil {
		return x.Focused
	}
	return false
}

type InteractionResolvedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users    []*User        `protobuf:"bytes,1,rep,name=Users,proto3" json:"Users,omitempty"`
	Members  []*GuildMember `protobuf:"bytes,2,rep,name=Members,proto3" json:"Members,omitempty"`
	Roles    []*Role        `protobuf:"bytes,3,rep,name=Roles,proto3" json:"Roles,omitempty"`
	Channels []*Channel     `protobuf:"bytes,4,rep,name=Channels,proto3" json:"Channels,omitempty"`
	Messages []*Message     `protobuf:"bytes,5,rep,name=Messages,proto3" json:"Messages,omitempty"`
}

func (x *InteractionResolvedData) Reset() {
	*x = InteractionResolvedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionResolvedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionResolvedData) ProtoMessage() {}

func (x *InteractionResolvedData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionResolvedData.ProtoReflect.Descriptor instead.
func (*InteractionResolvedData) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{11}
}

func (x *InteractionResolvedData) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *InteractionResolvedData) GetMembers() []*GuildMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *InteractionResolvedData) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *InteractionResolvedData) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *InteractionResolvedData) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type ApplicationSelectOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label       string `protobuf:"bytes,1,opt,name=Label,proto3" json:"Label,omitempty"`
	Value       string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Emoji       *Emoji `protobuf:"bytes,4,opt,name=Emoji,proto3" json:"Emoji,omitempty"`
	Default     bool   `protobuf:"varint,5,opt,name=Default,proto3" json:"Default,omitempty"`
}

func (x *ApplicationSelectOption) Reset() {
	*x = ApplicationSelectOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationSelectOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationSelectOption) ProtoMessage() {}

func (x *ApplicationSelectOption) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationSelectOption.ProtoReflect.Descriptor instead.
func (*ApplicationSelectOption) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{12}
}

func (x *ApplicationSelectOption) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ApplicationSelectOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ApplicationSelectOption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApplicationSelectOption) GetEmoji() *Emoji {
	if x != nil {
		return x.Emoji
	}
	return nil
}

func (x *ApplicationSelectOption) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

type Integration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                int64               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GuildID           int64               `protobuf:"varint,2,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	Name              string              `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Type              string              `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Enabled           bool                `protobuf:"varint,5,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
	Syncing           bool                `protobuf:"varint,6,opt,name=Syncing,proto3" json:"Syncing,omitempty"`
	RoleID            int64               `protobuf:"varint,7,opt,name=RoleID,proto3" json:"RoleID,omitempty"`
	EnableEmoticons   bool                `protobuf:"varint,8,opt,name=EnableEmoticons,proto3" json:"EnableEmoticons,omitempty"`
	ExpireBehavior    uint32              `protobuf:"varint,9,opt,name=ExpireBehavior,proto3" json:"ExpireBehavior,omitempty"`
	ExpireGracePeriod int32               `protobuf:"varint,10,opt,name=ExpireGracePeriod,proto3" json:"ExpireGracePeriod,omitempty"`
	User              *User               `protobuf:"bytes,11,opt,name=User,proto3" json:"User,omitempty"`
	Account           *IntegrationAccount `protobuf:"bytes,12,opt,name=Account,proto3" json:"Account,omitempty"`
	SyncedAt          string              `protobuf:"bytes,13,opt,name=SyncedAt,proto3" json:"SyncedAt,omitempty"`
	SubscriberCount   int32               `protobuf:"varint,14,opt,name=SubscriberCount,proto3" json:"SubscriberCount,omitempty"`
	Revoked           bool                `protobuf:"varint,15,opt,name=Revoked,proto3" json:"Revoked,omitempty"`
	Application       *Application        `protobuf:"bytes,16,opt,name=Application,proto3" json:"Application,omitempty"`
}

func (x *Integration) Reset() {
	*x = Integration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integration) ProtoMessage() {}

func (x *Integration) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integration.ProtoReflect.Descriptor instead.
func (*Integration) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{13}
}

func (x *Integration) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Integration) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Integration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Integration) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Integration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Integration) GetSyncing() bool {
	if x != nil {
		return x.Syncing
	}
	return false
}

func (x *Integration) GetRoleID() int64 {
	if x != nil {
		return x.RoleID
	}
	return 0
}

func (x *Integration) GetEnableEmoticons() bool {
	if x != nil {
		return x.EnableEmoticons
	}
	return false
}

func (x *Integration) GetExpireBehavior() uint32 {
	if x != nil {
		return x.ExpireBehavior
	}
	return 0
}

func (x *Integration) GetExpireGracePeriod() int32 {
	if x != nil {
		return x.ExpireGracePeriod
	}
	return 0
}

func (x *Integration) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Integration) GetAccount() *IntegrationAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Integration) GetSyncedAt() string {
	if x != nil {
		return x.SyncedAt
	}
	return ""
}

func (x *Integration) GetSubscriberCount() int32 {
	if x != nil {
		return x.SubscriberCount
	}
	return 0
}

func (x *Integration) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *Integration) GetApplication() *Application {
	if x != nil {
		return x.Application
	}
	return nil
}

type IntegrationAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *IntegrationAccount) Reset() {
	*x = IntegrationAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationAccount) ProtoMessage() {}

func (x *IntegrationAccount) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationAccount.ProtoReflect.Descriptor instead.
func (*IntegrationAccount) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{14}
}

func (x *IntegrationAccount) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *IntegrationAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type InteractionComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        uint32                     `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	CustomID    string                     `protobuf:"bytes,2,opt,name=CustomID,proto3" json:"CustomID,omitempty"`
	Disabled    bool                       `protobuf:"varint,3,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	Style       uint32                     `protobuf:"varint,4,opt,name=Style,proto3" json:"Style,omitempty"`
	Label       string                     `protobuf:"bytes,5,opt,name=Label,proto3" json:"Label,omitempty"`
	Emoji       *Emoji                     `protobuf:"bytes,6,opt,name=Emoji,proto3" json:"Emoji,omitempty"`
	URL         string                     `protobuf:"bytes,7,opt,name=URL,proto3" json:"URL,omitempty"`
	Options     []*ApplicationSelectOption `protobuf:"bytes,8,rep,name=Options,proto3" json:"Options,omitempty"`
	Placeholder string                     `protobuf:"bytes,9,opt,name=Placeholder,proto3" json:"Placeholder,omitempty"`
	MinValues   int32                      `protobuf:"varint,10,opt,name=MinValues,proto3" json:"MinValues,omitempty"`
	MaxValues   int32                      `protobuf:"varint,11,opt,name=MaxValues,proto3" json:"MaxValues,omitempty"`
	Components  []*InteractionComponent    `protobuf:"bytes,12,rep,name=Components,proto3" json:"Components,omitempty"`
}

func (x *InteractionComponent) Reset() {
	*x = InteractionComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionComponent) ProtoMessage() {}

func (x *InteractionComponent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionComponent.ProtoReflect.Descriptor instead.
func (*InteractionComponent) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{15}
}

func (x *InteractionComponent) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *InteractionComponent) GetCustomID() string {
	if x != nil {
		return x.CustomID
	}
	return ""
}

func (x *InteractionComponent) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *InteractionComponent) GetStyle() uint32 {
	if x != nil {
		return x.Style
	}
	return 0
}

func (x *InteractionComponent) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *InteractionComponent) GetEmoji() *Emoji {
	if x != nil {
		return x.Emoji
	}
	return nil
}

func (x *InteractionComponent) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *InteractionComponent) GetOptions() []*ApplicationSelectOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *InteractionComponent) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *InteractionComponent) GetMinValues() int32 {
	if x != nil {
		return x.MinValues
	}
	return 0
}

func (x *InteractionComponent) GetMaxValues() int32 {
	if x != nil {
		return x.MaxValues
	}
	return 0
}

func (x *InteractionComponent) GetComponents() []*InteractionComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                         int64               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GuildID                    int64               `protobuf:"varint,2,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	Type                       uint32              `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Position                   int32               `protobuf:"varint,4,opt,name=Position,proto3" json:"Position,omitempty"`
	PermissionOverwrites       []*ChannelOverwrite `protobuf:"bytes,5,rep,name=PermissionOverwrites,proto3" json:"PermissionOverwrites,omitempty"`
	Name                       string              `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
	Topic                      string              `protobuf:"bytes,7,opt,name=Topic,proto3" json:"Topic,omitempty"`
	NSFW                       bool                `protobuf:"varint,8,opt,name=NSFW,proto3" json:"NSFW,omitempty"`
	LastMessageID              string              `protobuf:"bytes,9,opt,name=LastMessageID,proto3" json:"LastMessageID,omitempty"`
	Bitrate                    int32               `protobuf:"varint,10,opt,name=Bitrate,proto3" json:"Bitrate,omitempty"`
	UserLimit                  int32               `protobuf:"varint,11,opt,name=UserLimit,proto3" json:"UserLimit,omitempty"`
	RateLimitPerUser           int32               `protobuf:"varint,12,opt,name=RateLimitPerUser,proto3" json:"RateLimitPerUser,omitempty"`
	Recipients                 []*User             `protobuf:"bytes,13,rep,name=Recipients,proto3" json:"Recipients,omitempty"`
	Icon                       string              `protobuf:"bytes,14,opt,name=Icon,proto3" json:"Icon,omitempty"`
	OwnerID                    int64               `protobuf:"varint,15,opt,name=OwnerID,proto3" json:"OwnerID,omitempty"`
	ApplicationID              int64               `protobuf:"varint,16,opt,name=ApplicationID,proto3" json:"ApplicationID,omitempty"`
	ParentID                   int64               `protobuf:"varint,17,opt,name=ParentID,proto3" json:"ParentID,omitempty"`
	LastPinTimestamp           string              `protobuf:"bytes,18,opt,name=LastPinTimestamp,proto3" json:"LastPinTimestamp,omitempty"`
	RTCRegion                  string              `protobuf:"bytes,19,opt,name=RTCRegion,proto3" json:"RTCRegion,omitempty"`
	VideoQualityMode           uint32              `protobuf:"varint,20,opt,name=VideoQualityMode,proto3" json:"VideoQualityMode,omitempty"`
	MessageCount               int32               `protobuf:"varint,21,opt,name=MessageCount,proto3" json:"MessageCount,omitempty"`
	MemberCount                int32               `protobuf:"varint,22,opt,name=MemberCount,proto3" json:"MemberCount,omitempty"`
	ThreadMetadata             *ThreadMetadata     `protobuf:"bytes,23,opt,name=ThreadMetadata,proto3" json:"ThreadMetadata,omitempty"`
	ThreadMember               *ThreadMember       `protobuf:"bytes,24,opt,name=ThreadMember,proto3" json:"ThreadMember,omitempty"`
	DefaultAutoArchiveDuration int32               `protobuf:"varint,25,opt,name=DefaultAutoArchiveDuration,proto3" json:"DefaultAutoArchiveDuration,omitempty"`
	Permissions                int64               `protobuf:"varint,26,opt,name=Permissions,proto3" json:"Permissions,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{16}
}

func (x *Channel) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Channel) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Channel) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Channel) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Channel) GetPermissionOverwrites() []*ChannelOverwrite {
	if x != nil {
		return x.PermissionOverwrites
	}
	return nil
}

func (x *Channel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Channel) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Channel) GetNSFW() bool {
	if x != nil {
		return x.NSFW
	}
	return false
}

func (x *Channel) GetLastMessageID() string {
	if x != nil {
		return x.LastMessageID
	}
	return ""
}

func (x *Channel) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *Channel) GetUserLimit() int32 {
	if x != nil {
		return x.UserLimit
	}
	return 0
}

func (x *Channel) GetRateLimitPerUser() int32 {
	if x != nil {
		return x.RateLimitPerUser
	}
	return 0
}

func (x *Channel) GetRecipients() []*User {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *Channel) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Channel) GetOwnerID() int64 {
	if x != nil {
		return x.OwnerID
	}
	return 0
}

func (x *Channel) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *Channel) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *Channel) GetLastPinTimestamp() string {
	if x != nil {
		return x.LastPinTimestamp
	}
	return ""
}

func (x *Channel) GetRTCRegion() string {
	if x != nil {
		return x.RTCRegion
	}
	return ""
}

func (x *Channel) GetVideoQualityMode() uint32 {
	if x != nil {
		return x.VideoQualityMode
	}
	return 0
}

func (x *Channel) GetMessageCount() int32 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *Channel) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *Channel) GetThreadMetadata() *ThreadMetadata {
	if x != nil {
		return x.ThreadMetadata
	}
	return nil
}

func (x *Channel) GetThreadMember() *ThreadMember {
	if x != nil {
		return x.ThreadMember
	}
	return nil
}

func (x *Channel) GetDefaultAutoArchiveDuration() int32 {
	if x != nil {
		return x.DefaultAutoArchiveDuration
	}
	return 0
}

func (x *Channel) GetPermissions() int64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

type ChannelOverwrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type  uint32 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Allow int64  `protobuf:"varint,3,opt,name=Allow,proto3" json:"Allow,omitempty"`
	Deny  int64  `protobuf:"varint,4,opt,name=Deny,proto3" json:"Deny,omitempty"`
}

func (x *ChannelOverwrite) Reset() {
	*x = ChannelOverwrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelOverwrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelOverwrite) ProtoMessage() {}

func (x *ChannelOverwrite) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelOverwrite.ProtoReflect.Descriptor instead.
func (*ChannelOverwrite) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{17}
}

func (x *ChannelOverwrite) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ChannelOverwrite) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ChannelOverwrite) GetAllow() int64 {
	if x != nil {
		return x.Allow
	}
	return 0
}

func (x *ChannelOverwrite) GetDeny() int64 {
	if x != nil {
		return x.Deny
	}
	return 0
}

type ThreadMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Archived            bool   `protobuf:"varint,1,opt,name=Archived,proto3" json:"Archived,omitempty"`
	AutoArchiveDuration int32  `protobuf:"varint,2,opt,name=AutoArchiveDuration,proto3" json:"AutoArchiveDuration,omitempty"`
	ArchiveTimestamp    string `protobuf:"bytes,3,opt,name=ArchiveTimestamp,proto3" json:"ArchiveTimestamp,omitempty"`
	Locked              bool   `protobuf:"varint,4,opt,name=Locked,proto3" json:"Locked,omitempty"`
}

func (x *ThreadMetadata) Reset() {
	*x = ThreadMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadMetadata) ProtoMessage() {}

func (x *ThreadMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadMetadata.ProtoReflect.Descriptor instead.
func (*ThreadMetadata) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{18}
}

func (x *ThreadMetadata) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *ThreadMetadata) GetAutoArchiveDuration() int32 {
	if x != nil {
		return x.AutoArchiveDuration
	}
	return 0
}

func (x *ThreadMetadata) GetArchiveTimestamp() string {
	if x != nil {
		return x.ArchiveTimestamp
	}
	return ""
}

func (x *ThreadMetadata) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

type ThreadMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID        int64  `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GuildID       int64  `protobuf:"varint,3,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	JoinTimestamp string `protobuf:"bytes,4,opt,name=JoinTimestamp,proto3" json:"JoinTimestamp,omitempty"`
	Flags         int32  `protobuf:"varint,5,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *ThreadMember) Reset() {
	*x = ThreadMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadMember) ProtoMessage() {}

func (x *ThreadMember) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadMember.ProtoReflect.Descriptor instead.
func (*ThreadMember) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{19}
}

func (x *ThreadMember) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ThreadMember) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ThreadMember) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *ThreadMember) GetJoinTimestamp() string {
	if x != nil {
		return x.JoinTimestamp
	}
	return ""
}

func (x *ThreadMember) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type StageInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GuildID              int64  `protobuf:"varint,2,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	ChannelID            int64  `protobuf:"varint,3,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Topic                string `protobuf:"bytes,4,opt,name=Topic,proto3" json:"Topic,omitempty"`
	PrivacyLabel         uint32 `protobuf:"varint,5,opt,name=PrivacyLabel,proto3" json:"PrivacyLabel,omitempty"`
	DiscoverableDisabled bool   `protobuf:"varint,6,opt,name=DiscoverableDisabled,proto3" json:"DiscoverableDisabled,omitempty"`
}

func (x *StageInstance) Reset() {
	*x = StageInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageInstance) ProtoMessage() {}

func (x *StageInstance) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageInstance.ProtoReflect.Descriptor instead.
func (*StageInstance) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{20}
}

func (x *StageInstance) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *StageInstance) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *StageInstance) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *StageInstance) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *StageInstance) GetPrivacyLabel() uint32 {
	if x != nil {
		return x.PrivacyLabel
	}
	return 0
}

func (x *StageInstance) GetDiscoverableDisabled() bool {
	if x != nil {
		return x.DiscoverableDisabled
	}
	return false
}

type Embed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string          `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Type        string          `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Description string          `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	URL         string          `protobuf:"bytes,4,opt,name=URL,proto3" json:"URL,omitempty"`
	Timestamp   string          `protobuf:"bytes,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Color       int32           `protobuf:"varint,6,opt,name=Color,proto3" json:"Color,omitempty"`
	Footer      *EmbedFooter    `protobuf:"bytes,7,opt,name=Footer,proto3" json:"Footer,omitempty"`
	Image       *EmbedImage     `protobuf:"bytes,8,opt,name=Image,proto3" json:"Image,omitempty"`
	Thumbnail   *EmbedThumbnail `protobuf:"bytes,9,opt,name=Thumbnail,proto3" json:"Thumbnail,omitempty"`
	Video       *EmbedVideo     `protobuf:"bytes,10,opt,name=Video,proto3" json:"Video,omitempty"`
	Provider    *EmbedProvider  `protobuf:"bytes,11,opt,name=Provider,proto3" json:"Provider,omitempty"`
	Author      *EmbedAuthor    `protobuf:"bytes,12,opt,name=Author,proto3" json:"Author,omitempty"`
	Fields      []*EmbedField   `protobuf:"bytes,13,rep,name=Fields,proto3" json:"Fields,omitempty"`
}

func (x *Embed) Reset() {
	*x = Embed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Embed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Embed) ProtoMessage() {}

func (x *Embed) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Embed.ProtoReflect.Descriptor instead.
func (*Embed) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{21}
}

func (x *Embed) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Embed) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Embed) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Embed) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *Embed) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Embed) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Embed) GetFooter() *EmbedFooter {
	if x != nil {
		return x.Footer
	}
	return nil
}

func (x *Embed) GetImage() *EmbedImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Embed) GetThumbnail() *EmbedThumbnail {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *Embed) GetVideo() *EmbedVideo {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *Embed) GetProvider() *EmbedProvider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *Embed) GetAuthor() *EmbedAuthor {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Embed) GetFields() []*EmbedField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type EmbedFooter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
	IconURL      string `protobuf:"bytes,2,opt,name=IconURL,proto3" json:"IconURL,omitempty"`
	ProxyIconURL string `protobuf:"bytes,3,opt,name=ProxyIconURL,proto3" json:"ProxyIconURL,omitempty"`
}

func (x *EmbedFooter) Reset() {
	*x = EmbedFooter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedFooter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedFooter) ProtoMessage() {}

func (x *EmbedFooter) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedFooter.ProtoReflect.Descriptor instead.
func (*EmbedFooter) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{22}
}

func (x *EmbedFooter) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *EmbedFooter) GetIconURL() string {
	if x != nil {
		return x.IconURL
	}
	return ""
}

func (x *EmbedFooter) GetProxyIconURL() string {
	if x != nil {
		return x.ProxyIconURL
	}
	return ""
}

type EmbedImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL      string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	ProxyURL string `protobuf:"bytes,2,opt,name=ProxyURL,proto3" json:"ProxyURL,omitempty"`
	Height   int32  `protobuf:"varint,3,opt,name=Height,proto3" json:"Height,omitempty"`
	Width    int32  `protobuf:"varint,4,opt,name=Width,proto3" json:"Width,omitempty"`
}

func (x *EmbedImage) Reset() {
	*x = EmbedImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedImage) ProtoMessage() {}

func (x *EmbedImage) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedImage.ProtoReflect.Descriptor instead.
func (*EmbedImage) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{23}
}

func (x *EmbedImage) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *EmbedImage) GetProxyURL() string {
	if x != nil {
		return x.ProxyURL
	}
	return ""
}

func (x *EmbedImage) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *EmbedImage) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type EmbedThumbnail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL      string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	ProxyURL string `protobuf:"bytes,2,opt,name=ProxyURL,proto3" json:"ProxyURL,omitempty"`
	Height   int32  `protobuf:"varint,3,opt,name=Height,proto3" json:"Height,omitempty"`
	Width    int32  `protobuf:"varint,4,opt,name=Width,proto3" json:"Width,omitempty"`
}

func (x *EmbedThumbnail) Reset() {
	*x = EmbedThumbnail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedThumbnail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedThumbnail) ProtoMessage() {}

func (x *EmbedThumbnail) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedThumbnail.ProtoReflect.Descriptor instead.
func (*EmbedThumbnail) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{24}
}

func (x *EmbedThumbnail) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *EmbedThumbnail) GetProxyURL() string {
	if x != nil {
		return x.ProxyURL
	}
	return ""
}

func (x *EmbedThumbnail) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *EmbedThumbnail) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type EmbedVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL    string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	Height int32  `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	Width  int32  `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`
}

func (x *EmbedVideo) Reset() {
	*x = EmbedVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedVideo) ProtoMessage() {}

func (x *EmbedVideo) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedVideo.ProtoReflect.Descriptor instead.
func (*EmbedVideo) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{25}
}

func (x *EmbedVideo) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *EmbedVideo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *EmbedVideo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type EmbedProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	URL  string `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (x *EmbedProvider) Reset() {
	*x = EmbedProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedProvider) ProtoMessage() {}

func (x *EmbedProvider) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedProvider.ProtoReflect.Descriptor instead.
func (*EmbedProvider) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{26}
}

func (x *EmbedProvider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EmbedProvider) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type EmbedAuthor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	URL          string `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	IconURL      string `protobuf:"bytes,3,opt,name=IconURL,proto3" json:"IconURL,omitempty"`
	ProxyIconURL string `protobuf:"bytes,4,opt,name=ProxyIconURL,proto3" json:"ProxyIconURL,omitempty"`
}

func (x *EmbedAuthor) Reset() {
	*x = EmbedAuthor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedAuthor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedAuthor) ProtoMessage() {}

func (x *EmbedAuthor) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedAuthor.ProtoReflect.Descriptor instead.
func (*EmbedAuthor) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{27}
}

func (x *EmbedAuthor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EmbedAuthor) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *EmbedAuthor) GetIconURL() string {
	if x != nil {
		return x.IconURL
	}
	return ""
}

func (x *EmbedAuthor) GetProxyIconURL() string {
	if x != nil {
		return x.ProxyIconURL
	}
	return ""
}

type EmbedField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Inline bool   `protobuf:"varint,3,opt,name=Inline,proto3" json:"Inline,omitempty"`
}

func (x *EmbedField) Reset() {
	*x = EmbedField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedField) ProtoMessage() {}

func (x *EmbedField) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedField.ProtoReflect.Descriptor instead.
func (*EmbedField) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{28}
}

func (x *EmbedField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EmbedField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EmbedField) GetInline() bool {
	if x != nil {
		return x.Inline
	}
	return false
}

type Emoji struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GuildID       int64   `protobuf:"varint,2,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	Name          string  `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Roles         []int64 `protobuf:"varint,4,rep,packed,name=Roles,proto3" json:"Roles,omitempty"`
	User          *User   `protobuf:"bytes,5,opt,name=User,proto3" json:"User,omitempty"`
	RequireColons bool    `protobuf:"varint,6,opt,name=RequireColons,proto3" json:"RequireColons,omitempty"`
	Managed       bool    `protobuf:"varint,7,opt,name=Managed,proto3" json:"Managed,omitempty"`
	Animated      bool    `protobuf:"varint,8,opt,name=Animated,proto3" json:"Animated,omitempty"`
	Available     bool    `protobuf:"varint,9,opt,name=Available,proto3" json:"Available,omitempty"`
}

func (x *Emoji) Reset() {
	*x = Emoji{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emoji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emoji) ProtoMessage() {}

func (x *Emoji) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emoji.ProtoReflect.Descriptor instead.
func (*Emoji) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{29}
}

func (x *Emoji) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Emoji) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Emoji) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Emoji) GetRoles() []int64 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Emoji) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Emoji) GetRequireColons() bool {
	if x != nil {
		return x.RequireColons
	}
	return false
}

func (x *Emoji) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *Emoji) GetAnimated() bool {
	if x != nil {
		return x.Animated
	}
	return false
}

func (x *Emoji) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

type Guild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                          int64             `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                        string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Icon                        string            `protobuf:"bytes,3,opt,name=Icon,proto3" json:"Icon,omitempty"`
	IconHash                    string            `protobuf:"bytes,4,opt,name=IconHash,proto3" json:"IconHash,omitempty"`
	Splash                      string            `protobuf:"bytes,5,opt,name=Splash,proto3" json:"Splash,omitempty"`
	DiscoverySplash             string            `protobuf:"bytes,6,opt,name=DiscoverySplash,proto3" json:"DiscoverySplash,omitempty"`
	Owner                       bool              `protobuf:"varint,7,opt,name=Owner,proto3" json:"Owner,omitempty"`
	OwnerID                     int64             `protobuf:"varint,8,opt,name=OwnerID,proto3" json:"OwnerID,omitempty"`
	Permissions                 int64             `protobuf:"varint,9,opt,name=Permissions,proto3" json:"Permissions,omitempty"`
	Region                      string            `protobuf:"bytes,10,opt,name=Region,proto3" json:"Region,omitempty"`
	AFKChannelID                int64             `protobuf:"varint,11,opt,name=AFKChannelID,proto3" json:"AFKChannelID,omitempty"`
	AFKTimeout                  int32             `protobuf:"varint,12,opt,name=AFKTimeout,proto3" json:"AFKTimeout,omitempty"`
	WidgetEnabled               bool              `protobuf:"varint,13,opt,name=WidgetEnabled,proto3" json:"WidgetEnabled,omitempty"`
	WidgetChannelID             int64             `protobuf:"varint,14,opt,name=WidgetChannelID,proto3" json:"WidgetChannelID,omitempty"`
	VerificationLevel           uint32            `protobuf:"varint,15,opt,name=VerificationLevel,proto3" json:"VerificationLevel,omitempty"`
	DefaultMessageNotifications int32             `protobuf:"varint,16,opt,name=DefaultMessageNotifications,proto3" json:"DefaultMessageNotifications,omitempty"`
	ExplicitContentFilter       int32             `protobuf:"varint,17,opt,name=ExplicitContentFilter,proto3" json:"ExplicitContentFilter,omitempty"`
	Roles                       []*Role           `protobuf:"bytes,18,rep,name=Roles,proto3" json:"Roles,omitempty"`
	Emojis                      []*Emoji          `protobuf:"bytes,19,rep,name=Emojis,proto3" json:"Emojis,omitempty"`
	Features                    []string          `protobuf:"bytes,20,rep,name=Features,proto3" json:"Features,omitempty"`
	MFALevel                    uint32            `protobuf:"varint,21,opt,name=MFALevel,proto3" json:"MFALevel,omitempty"`
	ApplicationID               int64             `protobuf:"varint,22,opt,name=ApplicationID,proto3" json:"ApplicationID,omitempty"`
	SystemChannelID             int64             `protobuf:"varint,23,opt,name=SystemChannelID,proto3" json:"SystemChannelID,omitempty"`
	SystemChannelFlags          uint32            `protobuf:"varint,24,opt,name=SystemChannelFlags,proto3" json:"SystemChannelFlags,omitempty"`
	RulesChannelID              int64             `protobuf:"varint,25,opt,name=RulesChannelID,proto3" json:"RulesChannelID,omitempty"`
	JoinedAt                    string            `protobuf:"bytes,26,opt,name=JoinedAt,proto3" json:"JoinedAt,omitempty"`
	Large                       bool              `protobuf:"varint,27,opt,name=Large,proto3" json:"Large,omitempty"`
	Unavailable                 bool              `protobuf:"varint,28,opt,name=Unavailable,proto3" json:"Unavailable,omitempty"`
	MemberCount                 int32             `protobuf:"varint,29,opt,name=MemberCount,proto3" json:"MemberCount,omitempty"`
	VoiceStates                 []*VoiceState     `protobuf:"bytes,30,rep,name=VoiceStates,proto3" json:"VoiceStates,omitempty"`
	Members                     []*GuildMember    `protobuf:"bytes,31,rep,name=Members,proto3" json:"Members,omitempty"`
	Channels                    []*Channel        `protobuf:"bytes,32,rep,name=Channels,proto3" json:"Channels,omitempty"`
	Presences                   []*Activity       `protobuf:"bytes,33,rep,name=Presences,proto3" json:"Presences,omitempty"`
	MaxPresences                int32             `protobuf:"varint,34,opt,name=MaxPresences,proto3" json:"MaxPresences,omitempty"`
	MaxMembers                  int32             `protobuf:"varint,35,opt,name=MaxMembers,proto3" json:"MaxMembers,omitempty"`
	VanityURLCode               string            `protobuf:"bytes,36,opt,name=VanityURLCode,proto3" json:"VanityURLCode,omitempty"`
	Description                 string            `protobuf:"bytes,37,opt,name=Description,proto3" json:"Description,omitempty"`
	Banner                      string            `protobuf:"bytes,38,opt,name=Banner,proto3" json:"Banner,omitempty"`
	PremiumTier                 uint32            `protobuf:"varint,39,opt,name=PremiumTier,proto3" json:"PremiumTier,omitempty"`
	PremiumSubscriptionCount    int32             `protobuf:"varint,40,opt,name=PremiumSubscriptionCount,proto3" json:"PremiumSubscriptionCount,omitempty"`
	PreferredLocale             string            `protobuf:"bytes,41,opt,name=PreferredLocale,proto3" json:"PreferredLocale,omitempty"`
	PublicUpdatesChannelID      int64             `protobuf:"varint,42,opt,name=PublicUpdatesChannelID,proto3" json:"PublicUpdatesChannelID,omitempty"`
	MaxVideoChannelUsers        int32             `protobuf:"varint,43,opt,name=MaxVideoChannelUsers,proto3" json:"MaxVideoChannelUsers,omitempty"`
	ApproximateMemberCount      int32             `protobuf:"varint,44,opt,name=ApproximateMemberCount,proto3" json:"ApproximateMemberCount,omitempty"`
	ApproximatePresenceCount    int32             `protobuf:"varint,45,opt,name=ApproximatePresenceCount,proto3" json:"ApproximatePresenceCount,omitempty"`
	NSFWLevel                   uint32            `protobuf:"varint,46,opt,name=NSFWLevel,proto3" json:"NSFWLevel,omitempty"`
	StageInstances              []*StageInstance  `protobuf:"bytes,47,rep,name=StageInstances,proto3" json:"StageInstances,omitempty"`
	Stickers                    []*Sticker        `protobuf:"bytes,48,rep,name=Stickers,proto3" json:"Stickers,omitempty"`
	GuildScheduledEvents        []*ScheduledEvent `protobuf:"bytes,49,rep,name=GuildScheduledEvents,proto3" json:"GuildScheduledEvents,omitempty"`
	PremiumProgressBarEnabled   bool              `protobuf:"varint,50,opt,name=PremiumProgressBarEnabled,proto3" json:"PremiumProgressBarEnabled,omitempty"`
}

func (x *Guild) Reset() {
	*x = Guild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Guild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Guild) ProtoMessage() {}

func (x *Guild) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Guild.ProtoReflect.Descriptor instead.
func (*Guild) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{30}
}

func (x *Guild) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Guild) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Guild) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Guild) GetIconHash() string {
	if x != nil {
		return x.IconHash
	}
	return ""
}

func (x *Guild) GetSplash() string {
	if x != nil {
		return x.Splash
	}
	return ""
}

func (x *Guild) GetDiscoverySplash() string {
	if x != nil {
		return x.DiscoverySplash
	}
	return ""
}

func (x *Guild) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

func (x *Guild) GetOwnerID() int64 {
	if x != nil {
		return x.OwnerID
	}
	return 0
}

func (x *Guild) GetPermissions() int64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

func (x *Guild) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Guild) GetAFKChannelID() int64 {
	if x != nil {
		return x.AFKChannelID
	}
	return 0
}

func (x *Guild) GetAFKTimeout() int32 {
	if x != nil {
		return x.AFKTimeout
	}
	return 0
}

func (x *Guild) GetWidgetEnabled() bool {
	if x != nil {
		return x.WidgetEnabled
	}
	return false
}

func (x *Guild) GetWidgetChannelID() int64 {
	if x != nil {
		return x.WidgetChannelID
	}
	return 0
}

func (x *Guild) GetVerificationLevel() uint32 {
	if x != nil {
		return x.VerificationLevel
	}
	return 0
}

func (x *Guild) GetDefaultMessageNotifications() int32 {
	if x != nil {
		return x.DefaultMessageNotifications
	}
	return 0
}

func (x *Guild) GetExplicitContentFilter() int32 {
	if x != nil {
		return x.ExplicitContentFilter
	}
	return 0
}

func (x *Guild) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Guild) GetEmojis() []*Emoji {
	if x != nil {
		return x.Emojis
	}
	return nil
}

func (x *Guild) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Guild) GetMFALevel() uint32 {
	if x != nil {
		return x.MFALevel
	}
	return 0
}

func (x *Guild) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *Guild) GetSystemChannelID() int64 {
	if x != nil {
		return x.SystemChannelID
	}
	return 0
}

func (x *Guild) GetSystemChannelFlags() uint32 {
	if x != nil {
		return x.SystemChannelFlags
	}
	return 0
}

func (x *Guild) GetRulesChannelID() int64 {
	if x != nil {
		return x.RulesChannelID
	}
	return 0
}

func (x *Guild) GetJoinedAt() string {
	if x != nil {
		return x.JoinedAt
	}
	return ""
}

func (x *Guild) GetLarge() bool {
	if x != nil {
		return x.Large
	}
	return false
}

func (x *Guild) GetUnavailable() bool {
	if x != nil {
		return x.Unavailable
	}
	return false
}

func (x *Guild) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *Guild) GetVoiceStates() []*VoiceState {
	if x != nil {
		return x.VoiceStates
	}
	return nil
}

func (x *Guild) GetMembers() []*GuildMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Guild) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *Guild) GetPresences() []*Activity {
	if x != nil {
		return x.Presences
	}
	return nil
}

func (x *Guild) GetMaxPresences() int32 {
	if x != nil {
		return x.MaxPresences
	}
	return 0
}

func (x *Guild) GetMaxMembers() int32 {
	if x != nil {
		return x.MaxMembers
	}
	return 0
}

func (x *Guild) GetVanityURLCode() string {
	if x != nil {
		return x.VanityURLCode
	}
	return ""
}

func (x *Guild) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Guild) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *Guild) GetPremiumTier() uint32 {
	if x != nil {
		return x.PremiumTier
	}
	return 0
}

func (x *Guild) GetPremiumSubscriptionCount() int32 {
	if x != nil {
		return x.PremiumSubscriptionCount
	}
	return 0
}

func (x *Guild) GetPreferredLocale() string {
	if x != nil {
		return x.PreferredLocale
	}
	return ""
}

func (x *Guild) GetPublicUpdatesChannelID() int64 {
	if x != nil {
		return x.PublicUpdatesChannelID
	}
	return 0
}

func (x *Guild) GetMaxVideoChannelUsers() int32 {
	if x != nil {
		return x.MaxVideoChannelUsers
	}
	return 0
}

func (x *Guild) GetApproximateMemberCount() int32 {
	if x != nil {
		return x.ApproximateMemberCount
	}
	return 0
}

func (x *Guild) GetApproximatePresenceCount() int32 {
	if x != nil {
		return x.ApproximatePresenceCount
	}
	return 0
}

func (x *Guild) GetNSFWLevel() uint32 {
	if x != nil {
		return x.NSFWLevel
	}
	return 0
}

func (x *Guild) GetStageInstances() []*StageInstance {
	if x != nil {
		return x.StageInstances
	}
	return nil
}

func (x *Guild) GetStickers() []*Sticker {
	if x != nil {
		return x.Stickers
	}
	return nil
}

func (x *Guild) GetGuildScheduledEvents() []*ScheduledEvent {
	if x != nil {
		return x.GuildScheduledEvents
	}
	return nil
}

func (x *Guild) GetPremiumProgressBarEnabled() bool {
	if x != nil {
		return x.PremiumProgressBarEnabled
	}
	return false
}

type UnavailableGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Unavailable bool  `protobuf:"varint,2,opt,name=Unavailable,proto3" json:"Unavailable,omitempty"`
}

func (x *UnavailableGuild) Reset() {
	*x = UnavailableGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnavailableGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnavailableGuild) ProtoMessage() {}

func (x *UnavailableGuild) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnavailableGuild.ProtoReflect.Descriptor instead.
func (*UnavailableGuild) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{31}
}

func (x *UnavailableGuild) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UnavailableGuild) GetUnavailable() bool {
	if x != nil {
		return x.Unavailable
	}
	return false
}

type GuildMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User                       *User   `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
	GuildID                    int64   `protobuf:"varint,2,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	Nick                       string  `protobuf:"bytes,3,opt,name=Nick,proto3" json:"Nick,omitempty"`
	Avatar                     string  `protobuf:"bytes,4,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Roles                      []int64 `protobuf:"varint,5,rep,packed,name=Roles,proto3" json:"Roles,omitempty"`
	JoinedAt                   string  `protobuf:"bytes,6,opt,name=JoinedAt,proto3" json:"JoinedAt,omitempty"`
	PremiumSince               string  `protobuf:"bytes,7,opt,name=PremiumSince,proto3" json:"PremiumSince,omitempty"`
	Deaf                       bool    `protobuf:"varint,8,opt,name=Deaf,proto3" json:"Deaf,omitempty"`
	Mute                       bool    `protobuf:"varint,9,opt,name=Mute,proto3" json:"Mute,omitempty"`
	Pending                    bool    `protobuf:"varint,10,opt,name=Pending,proto3" json:"Pending,omitempty"`
	Permissions                int64   `protobuf:"varint,11,opt,name=Permissions,proto3" json:"Permissions,omitempty"`
	CommunicationDisabledUntil string  `protobuf:"bytes,12,opt,name=CommunicationDisabledUntil,proto3" json:"CommunicationDisabledUntil,omitempty"`
}

func (x *GuildMember) Reset() {
	*x = GuildMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMember) ProtoMessage() {}

func (x *GuildMember) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMember.ProtoReflect.Descriptor instead.
func (*GuildMember) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{32}
}

func (x *GuildMember) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GuildMember) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *GuildMember) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *GuildMember) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *GuildMember) GetRoles() []int64 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *GuildMember) GetJoinedAt() string {
	if x != nil {
		return x.JoinedAt
	}
	return ""
}

func (x *GuildMember) GetPremiumSince() string {
	if x != nil {
		return x.PremiumSince
	}
	return ""
}

func (x *GuildMember) GetDeaf() bool {
	if x != nil {
		return x.Deaf
	}
	return false
}

func (x *GuildMember) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *GuildMember) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *GuildMember) GetPermissions() int64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

func (x *GuildMember) GetCommunicationDisabledUntil() string {
	if x != nil {
		return x.CommunicationDisabledUntil
	}
	return ""
}

type VoiceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID                  int64        `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ChannelID               int64        `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	GuildID                 int64        `protobuf:"varint,3,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	Member                  *GuildMember `protobuf:"bytes,4,opt,name=Member,proto3" json:"Member,omitempty"`
	SessionID               string       `protobuf:"bytes,5,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	Deaf                    bool         `protobuf:"varint,6,opt,name=Deaf,proto3" json:"Deaf,omitempty"`
	Mute                    bool         `protobuf:"varint,7,opt,name=Mute,proto3" json:"Mute,omitempty"`
	SelfDeaf                bool         `protobuf:"varint,8,opt,name=SelfDeaf,proto3" json:"SelfDeaf,omitempty"`
	SelfMute                bool         `protobuf:"varint,9,opt,name=SelfMute,proto3" json:"SelfMute,omitempty"`
	SelfStream              bool         `protobuf:"varint,10,opt,name=SelfStream,proto3" json:"SelfStream,omitempty"`
	SelfVideo               bool         `protobuf:"varint,11,opt,name=SelfVideo,proto3" json:"SelfVideo,omitempty"`
	Suppress                bool         `protobuf:"varint,12,opt,name=Suppress,proto3" json:"Suppress,omitempty"`
	RequestToSpeakTimestamp string       `protobuf:"bytes,13,opt,name=RequestToSpeakTimestamp,proto3" json:"RequestToSpeakTimestamp,omitempty"`
}

func (x *VoiceState) Reset() {
	*x = VoiceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceState) ProtoMessage() {}

func (x *VoiceState) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceState.ProtoReflect.Descriptor instead.
func (*VoiceState) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{33}
}

func (x *VoiceState) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *VoiceState) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *VoiceState) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *VoiceState) GetMember() *GuildMember {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *VoiceState) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *VoiceState) GetDeaf() bool {
	if x != nil {
		return x.Deaf
	}
	return false
}

func (x *VoiceState) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *VoiceState) GetSelfDeaf() bool {
	if x != nil {
		return x.SelfDeaf
	}
	return false
}

func (x *VoiceState) GetSelfMute() bool {
	if x != nil {
		return x.SelfMute
	}
	return false
}

func (x *VoiceState) GetSelfStream() bool {
	if x != nil {
		return x.SelfStream
	}
	return false
}

func (x *VoiceState) GetSelfVideo() bool {
	if x != nil {
		return x.SelfVideo
	}
	return false
}

func (x *VoiceState) GetSuppress() bool {
	if x != nil {
		return x.Suppress
	}
	return false
}

func (x *VoiceState) GetRequestToSpeakTimestamp() string {
	if x != nil {
		return x.RequestToSpeakTimestamp
	}
	return ""
}

type Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (x *Gateway) Reset() {
	*x = Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway) ProtoMessage() {}

func (x *Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway.ProtoReflect.Descriptor instead.
func (*Gateway) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{34}
}

func (x *Gateway) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type GatewayBot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL            string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	Shards         int32  `protobuf:"varint,2,opt,name=Shards,proto3" json:"Shards,omitempty"`
	Total          int32  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	Remaining      int32  `protobuf:"varint,4,opt,name=Remaining,proto3" json:"Remaining,omitempty"`
	ResetAfter     int32  `protobuf:"varint,5,opt,name=ResetAfter,proto3" json:"ResetAfter,omitempty"`
	MaxConcurrency int32  `protobuf:"varint,6,opt,name=MaxConcurrency,proto3" json:"MaxConcurrency,omitempty"`
}

func (x *GatewayBot) Reset() {
	*x = GatewayBot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayBot) ProtoMessage() {}

func (x *GatewayBot) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayBot.ProtoReflect.Descriptor instead.
func (*GatewayBot) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{35}
}

func (x *GatewayBot) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *GatewayBot) GetShards() int32 {
	if x != nil {
		return x.Shards
	}
	return 0
}

func (x *GatewayBot) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GatewayBot) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *GatewayBot) GetResetAfter() int32 {
	if x != nil {
		return x.ResetAfter
	}
	return 0
}

func (x *GatewayBot) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

type TooManyRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	RetryAfter int32  `protobuf:"varint,2,opt,name=RetryAfter,proto3" json:"RetryAfter,omitempty"`
	Global     bool   `protobuf:"varint,3,opt,name=Global,proto3" json:"Global,omitempty"`
}

func (x *TooManyRequests) Reset() {
	*x = TooManyRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TooManyRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TooManyRequests) ProtoMessage() {}

func (x *TooManyRequests) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TooManyRequests.ProtoReflect.Descriptor instead.
func (*TooManyRequests) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{36}
}

func (x *TooManyRequests) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TooManyRequests) GetRetryAfter() int32 {
	if x != nil {
		return x.RetryAfter
	}
	return 0
}

func (x *TooManyRequests) GetGlobal() bool {
	if x != nil {
		return x.Global
	}
	return false
}

type CreateDMChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientID int64 `protobuf:"varint,1,opt,name=RecipientID,proto3" json:"RecipientID,omitempty"`
}

func (x *CreateDMChannel) Reset() {
	*x = CreateDMChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDMChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDMChannel) ProtoMessage() {}

func (x *CreateDMChannel) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDMChannel.ProtoReflect.Descriptor instead.
func (*CreateDMChannel) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{37}
}

func (x *CreateDMChannel) GetRecipientID() int64 {
	if x != nil {
		return x.RecipientID
	}
	return 0
}

type Invite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                     string               `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Guild                    *Guild               `protobuf:"bytes,2,opt,name=Guild,proto3" json:"Guild,omitempty"`
	GuildID                  int64                `protobuf:"varint,3,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	Channel                  *Channel             `protobuf:"bytes,4,opt,name=Channel,proto3" json:"Channel,omitempty"`
	Inviter                  *User                `protobuf:"bytes,5,opt,name=Inviter,proto3" json:"Inviter,omitempty"`
	TargetType               uint32               `protobuf:"varint,6,opt,name=TargetType,proto3" json:"TargetType,omitempty"`
	TargetUser               *User                `protobuf:"bytes,7,opt,name=TargetUser,proto3" json:"TargetUser,omitempty"`
	TargetApplication        *Application         `protobuf:"bytes,8,opt,name=TargetApplication,proto3" json:"TargetApplication,omitempty"`
	ApproximatePresenceCount int32                `protobuf:"varint,9,opt,name=ApproximatePresenceCount,proto3" json:"ApproximatePresenceCount,omitempty"`
	ApproximateMemberCount   int32                `protobuf:"varint,10,opt,name=ApproximateMemberCount,proto3" json:"ApproximateMemberCount,omitempty"`
	ExpiresAt                string               `protobuf:"bytes,11,opt,name=ExpiresAt,proto3" json:"ExpiresAt,omitempty"`
	StageInstance            *InviteStageInstance `protobuf:"bytes,12,opt,name=StageInstance,proto3" json:"StageInstance,omitempty"`
	ScheduledEvent           *ScheduledEvent      `protobuf:"bytes,13,opt,name=ScheduledEvent,proto3" json:"ScheduledEvent,omitempty"`
	Uses                     int32                `protobuf:"varint,14,opt,name=Uses,proto3" json:"Uses,omitempty"`
	MaxUses                  int32                `protobuf:"varint,15,opt,name=MaxUses,proto3" json:"MaxUses,omitempty"`
	MaxAge                   int32                `protobuf:"varint,16,opt,name=MaxAge,proto3" json:"MaxAge,omitempty"`
	Temporary                bool                 `protobuf:"varint,17,opt,name=Temporary,proto3" json:"Temporary,omitempty"`
	CreatedAt                string               `protobuf:"bytes,18,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
}

func (x *Invite) Reset() {
	*x = Invite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invite) ProtoMessage() {}

func (x *Invite) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invite.ProtoReflect.Descriptor instead.
func (*Invite) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{38}
}

func (x *Invite) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Invite) GetGuild() *Guild {
	if x != nil {
		return x.Guild
	}
	return nil
}

func (x *Invite) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Invite) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *Invite) GetInviter() *User {
	if x != nil {
		return x.Inviter
	}
	return nil
}

func (x *Invite) GetTargetType() uint32 {
	if x != nil {
		return x.TargetType
	}
	return 0
}

func (x *Invite) GetTargetUser() *User {
	if x != nil {
		return x.TargetUser
	}
	return nil
}

func (x *Invite) GetTargetApplication() *Application {
	if x != nil {
		return x.TargetApplication
	}
	return nil
}

func (x *Invite) GetApproximatePresenceCount() int32 {
	if x != nil {
		return x.ApproximatePresenceCount
	}
	return 0
}

func (x *Invite) GetApproximateMemberCount() int32 {
	if x != nil {
		return x.ApproximateMemberCount
	}
	return 0
}

func (x *Invite) GetExpiresAt() string {
	if x != nil {
		return x.ExpiresAt
	}
	return ""
}

func (x *Invite) GetStageInstance() *InviteStageInstance {
	if x != nil {
		return x.StageInstance
	}
	return nil
}

func (x *Invite) GetScheduledEvent() *ScheduledEvent {
	if x != nil {
		return x.ScheduledEvent
	}
	return nil
}

func (x *Invite) GetUses() int32 {
	if x != nil {
		return x.Uses
	}
	return 0
}

func (x *Invite) GetMaxUses() int32 {
	if x != nil {
		return x.MaxUses
	}
	return 0
}

func (x *Invite) GetMaxAge() int32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *Invite) GetTemporary() bool {
	if x != nil {
		return x.Temporary
	}
	return false
}

func (x *Invite) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type InviteStageInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members          []*GuildMember `protobuf:"bytes,1,rep,name=Members,proto3" json:"Members,omitempty"`
	ParticipantCount int32          `protobuf:"varint,2,opt,name=ParticipantCount,proto3" json:"ParticipantCount,omitempty"`
	SpeakerCount     int32          `protobuf:"varint,3,opt,name=SpeakerCount,proto3" json:"SpeakerCount,omitempty"`
	Topic            string         `protobuf:"bytes,4,opt,name=Topic,proto3" json:"Topic,omitempty"`
}

func (x *InviteStageInstance) Reset() {
	*x = InviteStageInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteStageInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteStageInstance) ProtoMessage() {}

func (x *InviteStageInstance) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteStageInstance.ProtoReflect.Descriptor instead.
func (*InviteStageInstance) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{39}
}

func (x *InviteStageInstance) GetMembers() []*GuildMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *InviteStageInstance) GetParticipantCount() int32 {
	if x != nil {
		return x.ParticipantCount
	}
	return 0
}

func (x *InviteStageInstance) GetSpeakerCount() int32 {
	if x != nil {
		return x.SpeakerCount
	}
	return 0
}

func (x *InviteStageInstance) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type ScheduledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 int64          `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GuildID            int64          `protobuf:"varint,2,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	ChannelID          int64          `protobuf:"varint,3,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	CreatorID          int64          `protobuf:"varint,4,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
	Name               string         `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	Description        string         `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	ScheduledStartTime string         `protobuf:"bytes,7,opt,name=ScheduledStartTime,proto3" json:"ScheduledStartTime,omitempty"`
	ScheduledEndTime   string         `protobuf:"bytes,8,opt,name=ScheduledEndTime,proto3" json:"ScheduledEndTime,omitempty"`
	PrivacyLevel       uint32         `protobuf:"varint,9,opt,name=PrivacyLevel,proto3" json:"PrivacyLevel,omitempty"`
	Status             uint32         `protobuf:"varint,10,opt,name=Status,proto3" json:"Status,omitempty"`
	EntityType         uint32         `protobuf:"varint,11,opt,name=EntityType,proto3" json:"EntityType,omitempty"`
	EntityID           int64          `protobuf:"varint,12,opt,name=EntityID,proto3" json:"EntityID,omitempty"`
	EntityMetadata     *EventMetadata `protobuf:"bytes,13,opt,name=EntityMetadata,proto3" json:"EntityMetadata,omitempty"`
	Creator            *User          `protobuf:"bytes,14,opt,name=Creator,proto3" json:"Creator,omitempty"`
	UserCount          int32          `protobuf:"varint,15,opt,name=UserCount,proto3" json:"UserCount,omitempty"`
}

func (x *ScheduledEvent) Reset() {
	*x = ScheduledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledEvent) ProtoMessage() {}

func (x *ScheduledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledEvent.ProtoReflect.Descriptor instead.
func (*ScheduledEvent) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{40}
}

func (x *ScheduledEvent) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ScheduledEvent) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *ScheduledEvent) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *ScheduledEvent) GetCreatorID() int64 {
	if x != nil {
		return x.CreatorID
	}
	return 0
}

func (x *ScheduledEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduledEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ScheduledEvent) GetScheduledStartTime() string {
	if x != nil {
		return x.ScheduledStartTime
	}
	return ""
}

func (x *ScheduledEvent) GetScheduledEndTime() string {
	if x != nil {
		return x.ScheduledEndTime
	}
	return ""
}

func (x *ScheduledEvent) GetPrivacyLevel() uint32 {
	if x != nil {
		return x.PrivacyLevel
	}
	return 0
}

func (x *ScheduledEvent) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ScheduledEvent) GetEntityType() uint32 {
	if x != nil {
		return x.EntityType
	}
	return 0
}

func (x *ScheduledEvent) GetEntityID() int64 {
	if x != nil {
		return x.EntityID
	}
	return 0
}

func (x *ScheduledEvent) GetEntityMetadata() *EventMetadata {
	if x != nil {
		return x.EntityMetadata
	}
	return nil
}

func (x *ScheduledEvent) GetCreator() *User {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *ScheduledEvent) GetUserCount() int32 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

type EventMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location string `protobuf:"bytes,1,opt,name=Location,proto3" json:"Location,omitempty"`
}

func (x *EventMetadata) Reset() {
	*x = EventMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMetadata) ProtoMessage() {}

func (x *EventMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMetadata.ProtoReflect.Descriptor instead.
func (*EventMetadata) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{41}
}

func (x *EventMetadata) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type ScheduledEventUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID int64        `protobuf:"varint,1,opt,name=EventID,proto3" json:"EventID,omitempty"`
	User    *User        `protobuf:"bytes,2,opt,name=User,proto3" json:"User,omitempty"`
	Member  *GuildMember `protobuf:"bytes,3,opt,name=Member,proto3" json:"Member,omitempty"`
}

func (x *ScheduledEventUser) Reset() {
	*x = ScheduledEventUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledEventUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledEventUser) ProtoMessage() {}

func (x *ScheduledEventUser) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledEventUser.ProtoReflect.Descriptor instead.
func (*ScheduledEventUser) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{42}
}

func (x *ScheduledEventUser) GetEventID() int64 {
	if x != nil {
		return x.EventID
	}
	return 0
}

func (x *ScheduledEventUser) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ScheduledEventUser) GetMember() *GuildMember {
	if x != nil {
		return x.Member
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              int64                    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ChannelID       int64                    `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	GuildID         int64                    `protobuf:"varint,3,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	Author          *User                    `protobuf:"bytes,4,opt,name=Author,proto3" json:"Author,omitempty"`
	Member          *GuildMember             `protobuf:"bytes,5,opt,name=Member,proto3" json:"Member,omitempty"`
	Content         string                   `protobuf:"bytes,6,opt,name=Content,proto3" json:"Content,omitempty"`
	Timestamp       string                   `protobuf:"bytes,7,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	EditedTimestamp string                   `protobuf:"bytes,8,opt,name=EditedTimestamp,proto3" json:"EditedTimestamp,omitempty"`
	TTS             bool                     `protobuf:"varint,9,opt,name=TTS,proto3" json:"TTS,omitempty"`
	MentionEveryone bool                     `protobuf:"varint,10,opt,name=MentionEveryone,proto3" json:"MentionEveryone,omitempty"`
	Mentions        []*User                  `protobuf:"bytes,11,rep,name=Mentions,proto3" json:"Mentions,omitempty"`
	MentionRoles    []int64                  `protobuf:"varint,12,rep,packed,name=MentionRoles,proto3" json:"MentionRoles,omitempty"`
	MentionChannels []*MessageChannelMention `protobuf:"bytes,13,rep,name=MentionChannels,proto3" json:"MentionChannels,omitempty"`
	Attachments     []*MessageAttachment     `protobuf:"bytes,14,rep,name=Attachments,proto3" json:"Attachments,omitempty"`
	Embeds          []*Embed                 `protobuf:"bytes,15,rep,name=Embeds,proto3" json:"Embeds,omitempty"`
	Reactions       []*MessageReaction       `protobuf:"bytes,16,rep,name=Reactions,proto3" json:"Reactions,omitempty"`
	// string Nonce = 17;
	Pinned            bool                    `protobuf:"varint,18,opt,name=Pinned,proto3" json:"Pinned,omitempty"`
	WebhookID         int64                   `protobuf:"varint,19,opt,name=WebhookID,proto3" json:"WebhookID,omitempty"`
	Type              uint32                  `protobuf:"varint,20,opt,name=Type,proto3" json:"Type,omitempty"`
	Activity          *MessageActivity        `protobuf:"bytes,21,opt,name=Activity,proto3" json:"Activity,omitempty"`
	Application       *Application            `protobuf:"bytes,22,opt,name=Application,proto3" json:"Application,omitempty"`
	MessageReference  []*MessageReference     `protobuf:"bytes,23,rep,name=MessageReference,proto3" json:"MessageReference,omitempty"`
	Flags             uint32                  `protobuf:"varint,24,opt,name=Flags,proto3" json:"Flags,omitempty"`
	ReferencedMessage *Message                `protobuf:"bytes,25,opt,name=ReferencedMessage,proto3" json:"ReferencedMessage,omitempty"`
	Interaction       *MessageInteraction     `protobuf:"bytes,26,opt,name=Interaction,proto3" json:"Interaction,omitempty"`
	Thread            *Channel                `protobuf:"bytes,27,opt,name=Thread,proto3" json:"Thread,omitempty"`
	Components        []*InteractionComponent `protobuf:"bytes,28,rep,name=Components,proto3" json:"Components,omitempty"`
	StickerItems      []*MessageSticker       `protobuf:"bytes,29,rep,name=StickerItems,proto3" json:"StickerItems,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{43}
}

func (x *Message) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Message) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *Message) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Message) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Message) GetMember() *GuildMember {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Message) GetEditedTimestamp() string {
	if x != nil {
		return x.EditedTimestamp
	}
	return ""
}

func (x *Message) GetTTS() bool {
	if x != nil {
		return x.TTS
	}
	return false
}

func (x *Message) GetMentionEveryone() bool {
	if x != nil {
		return x.MentionEveryone
	}
	return false
}

func (x *Message) GetMentions() []*User {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *Message) GetMentionRoles() []int64 {
	if x != nil {
		return x.MentionRoles
	}
	return nil
}

func (x *Message) GetMentionChannels() []*MessageChannelMention {
	if x != nil {
		return x.MentionChannels
	}
	return nil
}

func (x *Message) GetAttachments() []*MessageAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *Message) GetEmbeds() []*Embed {
	if x != nil {
		return x.Embeds
	}
	return nil
}

func (x *Message) GetReactions() []*MessageReaction {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *Message) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *Message) GetWebhookID() int64 {
	if x != nil {
		return x.WebhookID
	}
	return 0
}

func (x *Message) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Message) GetActivity() *MessageActivity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *Message) GetApplication() *Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *Message) GetMessageReference() []*MessageReference {
	if x != nil {
		return x.MessageReference
	}
	return nil
}

func (x *Message) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Message) GetReferencedMessage() *Message {
	if x != nil {
		return x.ReferencedMessage
	}
	return nil
}

func (x *Message) GetInteraction() *MessageInteraction {
	if x != nil {
		return x.Interaction
	}
	return nil
}

func (x *Message) GetThread() *Channel {
	if x != nil {
		return x.Thread
	}
	return nil
}

func (x *Message) GetComponents() []*InteractionComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Message) GetStickerItems() []*MessageSticker {
	if x != nil {
		return x.StickerItems
	}
	return nil
}

type MessageInteraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type uint32 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	User *User  `protobuf:"bytes,4,opt,name=User,proto3" json:"User,omitempty"`
}

func (x *MessageInteraction) Reset() {
	*x = MessageInteraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageInteraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageInteraction) ProtoMessage() {}

func (x *MessageInteraction) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageInteraction.ProtoReflect.Descriptor instead.
func (*MessageInteraction) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{44}
}

func (x *MessageInteraction) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MessageInteraction) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MessageInteraction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageInteraction) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type MessageChannelMention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GuildID int64  `protobuf:"varint,2,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	Type    uint32 `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Name    string `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *MessageChannelMention) Reset() {
	*x = MessageChannelMention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageChannelMention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageChannelMention) ProtoMessage() {}

func (x *MessageChannelMention) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageChannelMention.ProtoReflect.Descriptor instead.
func (*MessageChannelMention) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{45}
}

func (x *MessageChannelMention) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MessageChannelMention) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *MessageChannelMention) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MessageChannelMention) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MessageReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ChannelID       int64 `protobuf:"varint,2,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	GuildID         int64 `protobuf:"varint,3,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	FailIfNotExists bool  `protobuf:"varint,4,opt,name=FailIfNotExists,proto3" json:"FailIfNotExists,omitempty"`
}

func (x *MessageReference) Reset() {
	*x = MessageReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReference) ProtoMessage() {}

func (x *MessageReference) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReference.ProtoReflect.Descriptor instead.
func (*MessageReference) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{46}
}

func (x *MessageReference) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MessageReference) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *MessageReference) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *MessageReference) GetFailIfNotExists() bool {
	if x != nil {
		return x.FailIfNotExists
	}
	return false
}

type MessageReaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32  `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Me    bool   `protobuf:"varint,2,opt,name=Me,proto3" json:"Me,omitempty"`
	Emoji *Emoji `protobuf:"bytes,3,opt,name=Emoji,proto3" json:"Emoji,omitempty"`
}

func (x *MessageReaction) Reset() {
	*x = MessageReaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReaction) ProtoMessage() {}

func (x *MessageReaction) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReaction.ProtoReflect.Descriptor instead.
func (*MessageReaction) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{47}
}

func (x *MessageReaction) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MessageReaction) GetMe() bool {
	if x != nil {
		return x.Me
	}
	return false
}

func (x *MessageReaction) GetEmoji() *Emoji {
	if x != nil {
		return x.Emoji
	}
	return nil
}

type MessageAllowedMentions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parse       []string `protobuf:"bytes,1,rep,name=Parse,proto3" json:"Parse,omitempty"`
	Roles       []int64  `protobuf:"varint,2,rep,packed,name=Roles,proto3" json:"Roles,omitempty"`
	Users       []int64  `protobuf:"varint,3,rep,packed,name=Users,proto3" json:"Users,omitempty"`
	RepliedUser bool     `protobuf:"varint,4,opt,name=RepliedUser,proto3" json:"RepliedUser,omitempty"`
}

func (x *MessageAllowedMentions) Reset() {
	*x = MessageAllowedMentions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageAllowedMentions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAllowedMentions) ProtoMessage() {}

func (x *MessageAllowedMentions) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAllowedMentions.ProtoReflect.Descriptor instead.
func (*MessageAllowedMentions) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{48}
}

func (x *MessageAllowedMentions) GetParse() []string {
	if x != nil {
		return x.Parse
	}
	return nil
}

func (x *MessageAllowedMentions) GetRoles() []int64 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *MessageAllowedMentions) GetUsers() []int64 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *MessageAllowedMentions) GetRepliedUser() bool {
	if x != nil {
		return x.RepliedUser
	}
	return false
}

type MessageAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=Filename,proto3" json:"Filename,omitempty"`
	Size     int32  `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	URL      string `protobuf:"bytes,4,opt,name=URL,proto3" json:"URL,omitempty"`
	ProxyURL string `protobuf:"bytes,5,opt,name=ProxyURL,proto3" json:"ProxyURL,omitempty"`
	Height   int32  `protobuf:"varint,6,opt,name=Height,proto3" json:"Height,omitempty"`
	Width    int32  `protobuf:"varint,7,opt,name=Width,proto3" json:"Width,omitempty"`
}

func (x *MessageAttachment) Reset() {
	*x = MessageAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAttachment) ProtoMessage() {}

func (x *MessageAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAttachment.ProtoReflect.Descriptor instead.
func (*MessageAttachment) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{49}
}

func (x *MessageAttachment) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MessageAttachment) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *MessageAttachment) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MessageAttachment) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *MessageAttachment) GetProxyURL() string {
	if x != nil {
		return x.ProxyURL
	}
	return ""
}

func (x *MessageAttachment) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MessageAttachment) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type MessageActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	PartyID string `protobuf:"bytes,2,opt,name=PartyID,proto3" json:"PartyID,omitempty"`
}

func (x *MessageActivity) Reset() {
	*x = MessageActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActivity) ProtoMessage() {}

func (x *MessageActivity) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActivity.ProtoReflect.Descriptor instead.
func (*MessageActivity) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{50}
}

func (x *MessageActivity) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MessageActivity) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string      `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type          int32       `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	URL           string      `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
	Timestamps    *Timestamps `protobuf:"bytes,4,opt,name=Timestamps,proto3" json:"Timestamps,omitempty"`
	ApplicationID int64       `protobuf:"varint,5,opt,name=ApplicationID,proto3" json:"ApplicationID,omitempty"`
	Details       string      `protobuf:"bytes,6,opt,name=Details,proto3" json:"Details,omitempty"`
	State         string      `protobuf:"bytes,7,opt,name=State,proto3" json:"State,omitempty"`
	Party         *Party      `protobuf:"bytes,8,opt,name=Party,proto3" json:"Party,omitempty"`
	Assets        *Assets     `protobuf:"bytes,9,opt,name=Assets,proto3" json:"Assets,omitempty"`
	Secrets       *Secrets    `protobuf:"bytes,10,opt,name=Secrets,proto3" json:"Secrets,omitempty"`
	Instance      bool        `protobuf:"varint,11,opt,name=Instance,proto3" json:"Instance,omitempty"`
	Flags         int32       `protobuf:"varint,12,opt,name=Flags,proto3" json:"Flags,omitempty"`
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{51}
}

func (x *Activity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Activity) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Activity) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *Activity) GetTimestamps() *Timestamps {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *Activity) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *Activity) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Activity) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Activity) GetParty() *Party {
	if x != nil {
		return x.Party
	}
	return nil
}

func (x *Activity) GetAssets() *Assets {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Activity) GetSecrets() *Secrets {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Activity) GetInstance() bool {
	if x != nil {
		return x.Instance
	}
	return false
}

func (x *Activity) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type Timestamps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32 `protobuf:"varint,1,opt,name=Start,proto3" json:"Start,omitempty"`
	End   int32 `protobuf:"varint,2,opt,name=End,proto3" json:"End,omitempty"`
}

func (x *Timestamps) Reset() {
	*x = Timestamps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamps) ProtoMessage() {}

func (x *Timestamps) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamps.ProtoReflect.Descriptor instead.
func (*Timestamps) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{52}
}

func (x *Timestamps) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Timestamps) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   string  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Size []int32 `protobuf:"varint,2,rep,packed,name=Size,proto3" json:"Size,omitempty"`
}

func (x *Party) Reset() {
	*x = Party{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party) ProtoMessage() {}

func (x *Party) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party.ProtoReflect.Descriptor instead.
func (*Party) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{53}
}

func (x *Party) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Party) GetSize() []int32 {
	if x != nil {
		return x.Size
	}
	return nil
}

type Assets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeImage string `protobuf:"bytes,1,opt,name=LargeImage,proto3" json:"LargeImage,omitempty"`
	LargeText  string `protobuf:"bytes,2,opt,name=LargeText,proto3" json:"LargeText,omitempty"`
	SmallImage string `protobuf:"bytes,3,opt,name=SmallImage,proto3" json:"SmallImage,omitempty"`
	SmallText  string `protobuf:"bytes,4,opt,name=SmallText,proto3" json:"SmallText,omitempty"`
}

func (x *Assets) Reset() {
	*x = Assets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assets) ProtoMessage() {}

func (x *Assets) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assets.ProtoReflect.Descriptor instead.
func (*Assets) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{54}
}

func (x *Assets) GetLargeImage() string {
	if x != nil {
		return x.LargeImage
	}
	return ""
}

func (x *Assets) GetLargeText() string {
	if x != nil {
		return x.LargeText
	}
	return ""
}

func (x *Assets) GetSmallImage() string {
	if x != nil {
		return x.SmallImage
	}
	return ""
}

func (x *Assets) GetSmallText() string {
	if x != nil {
		return x.SmallText
	}
	return ""
}

type Secrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Join     string `protobuf:"bytes,1,opt,name=Join,proto3" json:"Join,omitempty"`
	Spectate string `protobuf:"bytes,2,opt,name=Spectate,proto3" json:"Spectate,omitempty"`
	Match    string `protobuf:"bytes,3,opt,name=Match,proto3" json:"Match,omitempty"`
}

func (x *Secrets) Reset() {
	*x = Secrets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secrets) ProtoMessage() {}

func (x *Secrets) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secrets.ProtoReflect.Descriptor instead.
func (*Secrets) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{55}
}

func (x *Secrets) GetJoin() string {
	if x != nil {
		return x.Join
	}
	return ""
}

func (x *Secrets) GetSpectate() string {
	if x != nil {
		return x.Spectate
	}
	return ""
}

func (x *Secrets) GetMatch() string {
	if x != nil {
		return x.Match
	}
	return ""
}

type ClientStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desktop string `protobuf:"bytes,1,opt,name=Desktop,proto3" json:"Desktop,omitempty"`
	Mobile  string `protobuf:"bytes,2,opt,name=Mobile,proto3" json:"Mobile,omitempty"`
	Web     string `protobuf:"bytes,3,opt,name=Web,proto3" json:"Web,omitempty"`
}

func (x *ClientStatus) Reset() {
	*x = ClientStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStatus) ProtoMessage() {}

func (x *ClientStatus) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStatus.ProtoReflect.Descriptor instead.
func (*ClientStatus) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{56}
}

func (x *ClientStatus) GetDesktop() string {
	if x != nil {
		return x.Desktop
	}
	return ""
}

func (x *ClientStatus) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *ClientStatus) GetWeb() string {
	if x != nil {
		return x.Web
	}
	return ""
}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GuildID      int64    `protobuf:"varint,2,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	Name         string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Color        int32    `protobuf:"varint,4,opt,name=Color,proto3" json:"Color,omitempty"`
	Hoist        bool     `protobuf:"varint,5,opt,name=Hoist,proto3" json:"Hoist,omitempty"`
	Icon         string   `protobuf:"bytes,6,opt,name=Icon,proto3" json:"Icon,omitempty"`
	UnicodeEmoji string   `protobuf:"bytes,7,opt,name=UnicodeEmoji,proto3" json:"UnicodeEmoji,omitempty"`
	Position     int32    `protobuf:"varint,8,opt,name=Position,proto3" json:"Position,omitempty"`
	Permissions  int64    `protobuf:"varint,9,opt,name=Permissions,proto3" json:"Permissions,omitempty"`
	Managed      bool     `protobuf:"varint,10,opt,name=Managed,proto3" json:"Managed,omitempty"`
	Mentionable  bool     `protobuf:"varint,11,opt,name=Mentionable,proto3" json:"Mentionable,omitempty"`
	Tags         *RoleTag `protobuf:"bytes,12,opt,name=Tags,proto3" json:"Tags,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{57}
}

func (x *Role) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Role) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Role) GetHoist() bool {
	if x != nil {
		return x.Hoist
	}
	return false
}

func (x *Role) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Role) GetUnicodeEmoji() string {
	if x != nil {
		return x.UnicodeEmoji
	}
	return ""
}

func (x *Role) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Role) GetPermissions() int64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

func (x *Role) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *Role) GetMentionable() bool {
	if x != nil {
		return x.Mentionable
	}
	return false
}

func (x *Role) GetTags() *RoleTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type RoleTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PremiumSubscriber bool  `protobuf:"varint,1,opt,name=PremiumSubscriber,proto3" json:"PremiumSubscriber,omitempty"`
	BotID             int64 `protobuf:"varint,2,opt,name=BotID,proto3" json:"BotID,omitempty"`
	IntegrationID     int64 `protobuf:"varint,3,opt,name=IntegrationID,proto3" json:"IntegrationID,omitempty"`
}

func (x *RoleTag) Reset() {
	*x = RoleTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleTag) ProtoMessage() {}

func (x *RoleTag) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleTag.ProtoReflect.Descriptor instead.
func (*RoleTag) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{58}
}

func (x *RoleTag) GetPremiumSubscriber() bool {
	if x != nil {
		return x.PremiumSubscriber
	}
	return false
}

func (x *RoleTag) GetBotID() int64 {
	if x != nil {
		return x.BotID
	}
	return 0
}

func (x *RoleTag) GetIntegrationID() int64 {
	if x != nil {
		return x.IntegrationID
	}
	return 0
}

type Sticker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PackID      int64  `protobuf:"varint,2,opt,name=PackID,proto3" json:"PackID,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	Tags        string `protobuf:"bytes,5,opt,name=Tags,proto3" json:"Tags,omitempty"`
	Type        uint32 `protobuf:"varint,6,opt,name=Type,proto3" json:"Type,omitempty"`
	FormatType  uint32 `protobuf:"varint,7,opt,name=FormatType,proto3" json:"FormatType,omitempty"`
	Available   bool   `protobuf:"varint,8,opt,name=Available,proto3" json:"Available,omitempty"`
	GuildID     int64  `protobuf:"varint,9,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	User        *User  `protobuf:"bytes,10,opt,name=User,proto3" json:"User,omitempty"`
	SortValue   int32  `protobuf:"varint,11,opt,name=SortValue,proto3" json:"SortValue,omitempty"`
}

func (x *Sticker) Reset() {
	*x = Sticker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sticker) ProtoMessage() {}

func (x *Sticker) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sticker.ProtoReflect.Descriptor instead.
func (*Sticker) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{59}
}

func (x *Sticker) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Sticker) GetPackID() int64 {
	if x != nil {
		return x.PackID
	}
	return 0
}

func (x *Sticker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sticker) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Sticker) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Sticker) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Sticker) GetFormatType() uint32 {
	if x != nil {
		return x.FormatType
	}
	return 0
}

func (x *Sticker) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *Sticker) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Sticker) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Sticker) GetSortValue() int32 {
	if x != nil {
		return x.SortValue
	}
	return 0
}

type MessageSticker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	FormatType uint32 `protobuf:"varint,3,opt,name=FormatType,proto3" json:"FormatType,omitempty"`
}

func (x *MessageSticker) Reset() {
	*x = MessageSticker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSticker) ProtoMessage() {}

func (x *MessageSticker) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSticker.ProtoReflect.Descriptor instead.
func (*MessageSticker) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{60}
}

func (x *MessageSticker) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MessageSticker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageSticker) GetFormatType() uint32 {
	if x != nil {
		return x.FormatType
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Username      string `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	Discriminator string `protobuf:"bytes,3,opt,name=Discriminator,proto3" json:"Discriminator,omitempty"`
	GlobalName    string `protobuf:"bytes,4,opt,name=GlobalName,proto3" json:"GlobalName,omitempty"`
	Avatar        string `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Bot           bool   `protobuf:"varint,6,opt,name=Bot,proto3" json:"Bot,omitempty"`
	System        bool   `protobuf:"varint,7,opt,name=System,proto3" json:"System,omitempty"`
	MFAEnabled    bool   `protobuf:"varint,8,opt,name=MFAEnabled,proto3" json:"MFAEnabled,omitempty"`
	Banner        string `protobuf:"bytes,9,opt,name=Banner,proto3" json:"Banner,omitempty"`
	AccentColour  int32  `protobuf:"varint,10,opt,name=AccentColour,proto3" json:"AccentColour,omitempty"`
	Locale        string `protobuf:"bytes,11,opt,name=Locale,proto3" json:"Locale,omitempty"`
	Verified      bool   `protobuf:"varint,12,opt,name=Verified,proto3" json:"Verified,omitempty"`
	Email         string `protobuf:"bytes,13,opt,name=Email,proto3" json:"Email,omitempty"`
	Flags         int32  `protobuf:"varint,14,opt,name=Flags,proto3" json:"Flags,omitempty"`
	PremiumType   int32  `protobuf:"varint,15,opt,name=PremiumType,proto3" json:"PremiumType,omitempty"`
	PublicFlags   int32  `protobuf:"varint,16,opt,name=PublicFlags,proto3" json:"PublicFlags,omitempty"`
	DMChannelID   int64  `protobuf:"varint,17,opt,name=DMChannelID,proto3" json:"DMChannelID,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{61}
}

func (x *User) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetDiscriminator() string {
	if x != nil {
		return x.Discriminator
	}
	return ""
}

func (x *User) GetGlobalName() string {
	if x != nil {
		return x.GlobalName
	}
	return ""
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *User) GetBot() bool {
	if x != nil {
		return x.Bot
	}
	return false
}

func (x *User) GetSystem() bool {
	if x != nil {
		return x.System
	}
	return false
}

func (x *User) GetMFAEnabled() bool {
	if x != nil {
		return x.MFAEnabled
	}
	return false
}

func (x *User) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *User) GetAccentColour() int32 {
	if x != nil {
		return x.AccentColour
	}
	return 0
}

func (x *User) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *User) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *User) GetPremiumType() int32 {
	if x != nil {
		return x.PremiumType
	}
	return 0
}

func (x *User) GetPublicFlags() int32 {
	if x != nil {
		return x.PublicFlags
	}
	return 0
}

func (x *User) GetDMChannelID() int64 {
	if x != nil {
		return x.DMChannelID
	}
	return 0
}

type Webhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type          uint32 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	GuildID       int64  `protobuf:"varint,3,opt,name=GuildID,proto3" json:"GuildID,omitempty"`
	ChannelID     int64  `protobuf:"varint,4,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	User          *User  `protobuf:"bytes,5,opt,name=User,proto3" json:"User,omitempty"`
	Name          string `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
	Avatar        string `protobuf:"bytes,7,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Token         string `protobuf:"bytes,8,opt,name=Token,proto3" json:"Token,omitempty"`
	ApplicationID int64  `protobuf:"varint,9,opt,name=ApplicationID,proto3" json:"ApplicationID,omitempty"`
}

func (x *Webhook) Reset() {
	*x = Webhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Webhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webhook) ProtoMessage() {}

func (x *Webhook) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webhook.ProtoReflect.Descriptor instead.
func (*Webhook) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{62}
}

func (x *Webhook) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Webhook) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Webhook) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Webhook) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *Webhook) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Webhook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Webhook) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Webhook) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Webhook) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

type WebhookMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content         string                    `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	Username        string                    `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	AvatarURL       string                    `protobuf:"bytes,3,opt,name=AvatarURL,proto3" json:"AvatarURL,omitempty"`
	TTS             bool                      `protobuf:"varint,4,opt,name=TTS,proto3" json:"TTS,omitempty"`
	Embeds          []*Embed                  `protobuf:"bytes,5,rep,name=Embeds,proto3" json:"Embeds,omitempty"`
	AllowedMentions []*MessageAllowedMentions `protobuf:"bytes,6,rep,name=AllowedMentions,proto3" json:"AllowedMentions,omitempty"`
	Components      []*InteractionComponent   `protobuf:"bytes,7,rep,name=Components,proto3" json:"Components,omitempty"`
	PayloadJSON     []byte                    `protobuf:"bytes,8,opt,name=PayloadJSON,proto3" json:"PayloadJSON,omitempty"`
}

func (x *WebhookMessage) Reset() {
	*x = WebhookMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookMessage) ProtoMessage() {}

func (x *WebhookMessage) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookMessage.ProtoReflect.Descriptor instead.
func (*WebhookMessage) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{63}
}

func (x *WebhookMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *WebhookMessage) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WebhookMessage) GetAvatarURL() string {
	if x != nil {
		return x.AvatarURL
	}
	return ""
}

func (x *WebhookMessage) GetTTS() bool {
	if x != nil {
		return x.TTS
	}
	return false
}

func (x *WebhookMessage) GetEmbeds() []*Embed {
	if x != nil {
		return x.Embeds
	}
	return nil
}

func (x *WebhookMessage) GetAllowedMentions() []*MessageAllowedMentions {
	if x != nil {
		return x.AllowedMentions
	}
	return nil
}

func (x *WebhookMessage) GetComponents() []*InteractionComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *WebhookMessage) GetPayloadJSON() []byte {
	if x != nil {
		return x.PayloadJSON
	}
	return nil
}

var File_discord_proto protoreflect.FileDescriptor

var file_discord_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x22, 0xe8, 0x04, 0x0a, 0x0b, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x50, 0x43, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x42, 0x6f, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x42, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x24, 0x0a,
	0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x54,
	0x65, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53,
	0x4b, 0x55, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x53, 0x4b, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x20, 0x0a, 0x03, 0x42, 0x6f, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x03, 0x42, 0x6f, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x07,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x9f, 0x01,
	0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x22,
	0xb4, 0x02, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x22, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x0d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x49, 0x0a,
	0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5d, 0x0a, 0x1d, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x82, 0x03, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x6f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x4a, 0x0a, 0x1e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa8, 0x03, 0x0a, 0x0b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x06, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3d, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x44, 0x22, 0xaa, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x22,
	0xf4, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x05, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x05, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x52, 0x05, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x22, 0xa0, 0x04, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x47, 0x72, 0x61, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x22, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa2,
	0x03, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x25, 0x0a, 0x05, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52,
	0x05, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x3b, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xb7, 0x07, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x14, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x14, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x53, 0x46, 0x57, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x4e, 0x53, 0x46, 0x57, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x54, 0x43, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x52, 0x54, 0x43, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x0e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3a, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0c, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1a, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x60, 0x0a,
	0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x65, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x65, 0x6e, 0x79, 0x22,
	0xa2, 0x01, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x30,
	0x0a, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x41, 0x75, 0x74,
	0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x10, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xea, 0x03, 0x0a, 0x05,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x46, 0x6f, 0x6f, 0x74, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52,
	0x09, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x33, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x5f, 0x0a, 0x0b, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x63,
	0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x63,
	0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x22, 0x68, 0x0a, 0x0a, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x22, 0x6c, 0x0a, 0x0e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x22, 0x4c, 0x0a, 0x0a, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52,
	0x4c, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22,
	0x35, 0x0a, 0x0d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x22, 0x71, 0x0a, 0x0b, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x63,
	0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x63,
	0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x22, 0x4e, 0x0a, 0x0a, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x05, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x6e,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xd6, 0x0f, 0x0a, 0x05, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x70, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x41, 0x46, 0x4b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x41, 0x46, 0x4b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x46, 0x4b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x46, 0x4b, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x40, 0x0a, 0x1b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x06, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x52, 0x06, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x46, 0x41, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4d, 0x46, 0x41, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x0b, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x09, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x4d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x56, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x55, 0x52, 0x4c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x56, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x55, 0x52, 0x4c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54, 0x69, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54, 0x69, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x18, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x18, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14,
	0x4d, 0x61, 0x78, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x4d, 0x61, 0x78, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x36, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x53, 0x46, 0x57, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4e, 0x53, 0x46, 0x57, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18,
	0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x08, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3c, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x61, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x44,
	0x0a, 0x10, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0xf1, 0x02, 0x0a, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x61, 0x66, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x44, 0x65, 0x61, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x75, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x9d, 0x03, 0x0a, 0x0a, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x61, 0x66, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x44, 0x65, 0x61, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x75, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x61, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x61, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x66,
	0x4d, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53, 0x65, 0x6c, 0x66,
	0x4d, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x66, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x53, 0x65, 0x6c, 0x66, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38,
	0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x1b, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x55, 0x52, 0x4c, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x42, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x63, 0x0a, 0x0f, 0x54, 0x6f,
	0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22,
	0x33, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x4d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0xe4, 0x05, 0x0a, 0x06, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x05, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x28, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x11, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x41, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x55, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x41, 0x67,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x13,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x89, 0x04, 0x0a, 0x0e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x3f, 0x0a,
	0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28,
	0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc4, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x06, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x53, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x54, 0x54, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65,
	0x12, 0x2a, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x08, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0c, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x49, 0x0a, 0x0f, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x06, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49,
	0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a,
	0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x11, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3c, 0x0a, 0x0c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x52, 0x0c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x70,
	0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x22, 0x69, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x10,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x61, 0x69, 0x6c,
	0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x46, 0x61, 0x69, 0x6c, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x22, 0x5e, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x4d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4d, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x05, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x22, 0x7c, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x22, 0xaf, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x22, 0x3f, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x44, 0x22, 0x80, 0x03, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x34, 0x0a, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x05, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x28, 0x0a,
	0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52,
	0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x07, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22, 0x2b, 0x0a, 0x05,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x06, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x78, 0x74,
	0x22, 0x4f, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4a,
	0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x22, 0x52, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x57, 0x65, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x57, 0x65, 0x62, 0x22, 0xc9, 0x02, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x6f, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x48, 0x6f, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x22, 0x73, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11,
	0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xa9, 0x02, 0x0a, 0x07, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x54, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdc, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x42,
	0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x42, 0x6f, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x46, 0x41, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4d, 0x46, 0x41, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x41, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x75,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x4d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x44, 0x4d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x22, 0xf1, 0x01, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xcd, 0x02, 0x0a, 0x0e,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x52,
	0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x52, 0x4c, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x54, 0x54, 0x53, 0x12, 0x27, 0x0a, 0x06, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x06, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x12, 0x4a, 0x0a,
	0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x53, 0x4f, 0x4e, 0x42, 0x38, 0x5a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d,
	0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x2f, 0x53, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2d,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_discord_proto_rawDescOnce sync.Once
	file_discord_proto_rawDescData = file_discord_proto_rawDesc
)

func file_discord_proto_rawDescGZIP() []byte {
	file_discord_proto_rawDescOnce.Do(func() {
		file_discord_proto_rawDescData = protoimpl.X.CompressGZIP(file_discord_proto_rawDescData)
	})
	return file_discord_proto_rawDescData
}

var file_discord_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_discord_proto_goTypes = []interface{}{
	(*Application)(nil),                        // 0: sandwich.Application
	(*ApplicationTeam)(nil),                    // 1: sandwich.ApplicationTeam
	(*ApplicationTeamMember)(nil),              // 2: sandwich.ApplicationTeamMember
	(*ApplicationCommand)(nil),                 // 3: sandwich.ApplicationCommand
	(*GuildApplicationCommandPermissions)(nil), // 4: sandwich.GuildApplicationCommandPermissions
	(*ApplicationCommandPermissions)(nil),      // 5: sandwich.ApplicationCommandPermissions
	(*ApplicationCommandOption)(nil),           // 6: sandwich.ApplicationCommandOption
	(*ApplicationCommandOptionChoice)(nil),     // 7: sandwich.ApplicationCommandOptionChoice
	(*Interaction)(nil),                        // 8: sandwich.Interaction
	(*InteractionData)(nil),                    // 9: sandwich.InteractionData
	(*InteractionDataOption)(nil),              // 10: sandwich.InteractionDataOption
	(*InteractionResolvedData)(nil),            // 11: sandwich.InteractionResolvedData
	(*ApplicationSelectOption)(nil),            // 12: sandwich.ApplicationSelectOption
	(*Integration)(nil),                        // 13: sandwich.Integration
	(*IntegrationAccount)(nil),                 // 14: sandwich.IntegrationAccount
	(*InteractionComponent)(nil),               // 15: sandwich.InteractionComponent
	(*Channel)(nil),                            // 16: sandwich.Channel
	(*ChannelOverwrite)(nil),                   // 17: sandwich.ChannelOverwrite
	(*ThreadMetadata)(nil),                     // 18: sandwich.ThreadMetadata
	(*ThreadMember)(nil),                       // 19: sandwich.ThreadMember
	(*StageInstance)(nil),                      // 20: sandwich.StageInstance
	(*Embed)(nil),                              // 21: sandwich.Embed
	(*EmbedFooter)(nil),                        // 22: sandwich.EmbedFooter
	(*EmbedImage)(nil),                         // 23: sandwich.EmbedImage
	(*EmbedThumbnail)(nil),                     // 24: sandwich.EmbedThumbnail
	(*EmbedVideo)(nil),                         // 25: sandwich.EmbedVideo
	(*EmbedProvider)(nil),                      // 26: sandwich.EmbedProvider
	(*EmbedAuthor)(nil),                        // 27: sandwich.EmbedAuthor
	(*EmbedField)(nil),                         // 28: sandwich.EmbedField
	(*Emoji)(nil),                              // 29: sandwich.Emoji
	(*Guild)(nil),                              // 30: sandwich.Guild
	(*UnavailableGuild)(nil),                   // 31: sandwich.UnavailableGuild
	(*GuildMember)(nil),                        // 32: sandwich.GuildMember
	(*VoiceState)(nil),                         // 33: sandwich.VoiceState
	(*Gateway)(nil),                            // 34: sandwich.Gateway
	(*GatewayBot)(nil),                         // 35: sandwich.GatewayBot
	(*TooManyRequests)(nil),                    // 36: sandwich.TooManyRequests
	(*CreateDMChannel)(nil),                    // 37: sandwich.CreateDMChannel
	(*Invite)(nil),                             // 38: sandwich.Invite
	(*InviteStageInstance)(nil),                // 39: sandwich.InviteStageInstance
	(*ScheduledEvent)(nil),                     // 40: sandwich.ScheduledEvent
	(*EventMetadata)(nil),                      // 41: sandwich.EventMetadata
	(*ScheduledEventUser)(nil),                 // 42: sandwich.ScheduledEventUser
	(*Message)(nil),                            // 43: sandwich.Message
	(*MessageInteraction)(nil),                 // 44: sandwich.MessageInteraction
	(*MessageChannelMention)(nil),              // 45: sandwich.MessageChannelMention
	(*MessageReference)(nil),                   // 46: sandwich.MessageReference
	(*MessageReaction)(nil),                    // 47: sandwich.MessageReaction
	(*MessageAllowedMentions)(nil),             // 48: sandwich.MessageAllowedMentions
	(*MessageAttachment)(nil),                  // 49: sandwich.MessageAttachment
	(*MessageActivity)(nil),                    // 50: sandwich.MessageActivity
	(*Activity)(nil),                           // 51: sandwich.Activity
	(*Timestamps)(nil),                         // 52: sandwich.Timestamps
	(*Party)(nil),                              // 53: sandwich.Party
	(*Assets)(nil),                             // 54: sandwich.Assets
	(*Secrets)(nil),                            // 55: sandwich.Secrets
	(*ClientStatus)(nil),                       // 56: sandwich.ClientStatus
	(*Role)(nil),                               // 57: sandwich.Role
	(*RoleTag)(nil),                            // 58: sandwich.RoleTag
	(*Sticker)(nil),                            // 59: sandwich.Sticker
	(*MessageSticker)(nil),                     // 60: sandwich.MessageSticker
	(*User)(nil),                               // 61: sandwich.User
	(*Webhook)(nil),                            // 62: sandwich.Webhook
	(*WebhookMessage)(nil),                     // 63: sandwich.WebhookMessage
}
var file_discord_proto_depIdxs = []int32{
	61, // 0: sandwich.Application.Owner:type_name -> sandwich.User
	1,  // 1: sandwich.Application.Team:type_name -> sandwich.ApplicationTeam
	61, // 2: sandwich.Application.Bot:type_name -> sandwich.User
	2,  // 3: sandwich.ApplicationTeam.Members:type_name -> sandwich.ApplicationTeamMember
	61, // 4: sandwich.ApplicationTeamMember.User:type_name -> sandwich.User
	6,  // 5: sandwich.ApplicationCommand.Options:type_name -> sandwich.ApplicationCommandOption
	5,  // 6: sandwich.GuildApplicationCommandPermissions.Permissions:type_name -> sandwich.ApplicationCommandPermissions
	7,  // 7: sandwich.ApplicationCommandOption.Choices:type_name -> sandwich.ApplicationCommandOptionChoice
	6,  // 8: sandwich.ApplicationCommandOption.Options:type_name -> sandwich.ApplicationCommandOption
	9,  // 9: sandwich.Interaction.Data:type_name -> sandwich.InteractionData
	32, // 10: sandwich.Interaction.Member:type_name -> sandwich.GuildMember
	61, // 11: sandwich.Interaction.User:type_name -> sandwich.User
	43, // 12: sandwich.Interaction.Message:type_name -> sandwich.Message
	11, // 13: sandwich.InteractionData.Resolved:type_name -> sandwich.InteractionResolvedData
	10, // 14: sandwich.InteractionData.Options:type_name -> sandwich.InteractionDataOption
	12, // 15: sandwich.InteractionData.Values:type_name -> sandwich.ApplicationSelectOption
	10, // 16: sandwich.InteractionDataOption.Options:type_name -> sandwich.InteractionDataOption
	61, // 17: sandwich.InteractionResolvedData.Users:type_name -> sandwich.User
	32, // 18: sandwich.InteractionResolvedData.Members:type_name -> sandwich.GuildMember
	57, // 19: sandwich.InteractionResolvedData.Roles:type_name -> sandwich.Role
	16, // 20: sandwich.InteractionResolvedData.Channels:type_name -> sandwich.Channel
	43, // 21: sandwich.InteractionResolvedData.Messages:type_name -> sandwich.Message
	29, // 22: sandwich.ApplicationSelectOption.Emoji:type_name -> sandwich.Emoji
	61, // 23: sandwich.Integration.User:type_name -> sandwich.User
	14, // 24: sandwich.Integration.Account:type_name -> sandwich.IntegrationAccount
	0,  // 25: sandwich.Integration.Application:type_name -> sandwich.Application
	29, // 26: sandwich.InteractionComponent.Emoji:type_name -> sandwich.Emoji
	12, // 27: sandwich.InteractionComponent.Options:type_name -> sandwich.ApplicationSelectOption
	15, // 28: sandwich.InteractionComponent.Components:type_name -> sandwich.InteractionComponent
	17, // 29: sandwich.Channel.PermissionOverwrites:type_name -> sandwich.ChannelOverwrite
	61, // 30: sandwich.Channel.Recipients:type_name -> sandwich.User
	18, // 31: sandwich.Channel.ThreadMetadata:type_name -> sandwich.ThreadMetadata
	19, // 32: sandwich.Channel.ThreadMember:type_name -> sandwich.ThreadMember
	22, // 33: sandwich.Embed.Footer:type_name -> sandwich.EmbedFooter
	23, // 34: sandwich.Embed.Image:type_name -> sandwich.EmbedImage
	24, // 35: sandwich.Embed.Thumbnail:type_name -> sandwich.EmbedThumbnail
	25, // 36: sandwich.Embed.Video:type_name -> sandwich.EmbedVideo
	26, // 37: sandwich.Embed.Provider:type_name -> sandwich.EmbedProvider
	27, // 38: sandwich.Embed.Author:type_name -> sandwich.EmbedAuthor
	28, // 39: sandwich.Embed.Fields:type_name -> sandwich.EmbedField
	61, // 40: sandwich.Emoji.User:type_name -> sandwich.User
	57, // 41: sandwich.Guild.Roles:type_name -> sandwich.Role
	29, // 42: sandwich.Guild.Emojis:type_name -> sandwich.Emoji
	33, // 43: sandwich.Guild.VoiceStates:type_name -> sandwich.VoiceState
	32, // 44: sandwich.Guild.Members:type_name -> sandwich.GuildMember
	16, // 45: sandwich.Guild.Channels:type_name -> sandwich.Channel
	51, // 46: sandwich.Guild.Presences:type_name -> sandwich.Activity
	20, // 47: sandwich.Guild.StageInstances:type_name -> sandwich.StageInstance
	59, // 48: sandwich.Guild.Stickers:type_name -> sandwich.Sticker
	40, // 49: sandwich.Guild.GuildScheduledEvents:type_name -> sandwich.ScheduledEvent
	61, // 50: sandwich.GuildMember.User:type_name -> sandwich.User
	32, // 51: sandwich.VoiceState.Member:type_name -> sandwich.GuildMember
	30, // 52: sandwich.Invite.Guild:type_name -> sandwich.Guild
	16, // 53: sandwich.Invite.Channel:type_name -> sandwich.Channel
	61, // 54: sandwich.Invite.Inviter:type_name -> sandwich.User
	61, // 55: sandwich.Invite.TargetUser:type_name -> sandwich.User
	0,  // 56: sandwich.Invite.TargetApplication:type_name -> sandwich.Application
	39, // 57: sandwich.Invite.StageInstance:type_name -> sandwich.InviteStageInstance
	40, // 58: sandwich.Invite.ScheduledEvent:type_name -> sandwich.ScheduledEvent
	32, // 59: sandwich.InviteStageInstance.Members:type_name -> sandwich.GuildMember
	41, // 60: sandwich.ScheduledEvent.EntityMetadata:type_name -> sandwich.EventMetadata
	61, // 61: sandwich.ScheduledEvent.Creator:type_name -> sandwich.User
	61, // 62: sandwich.ScheduledEventUser.User:type_name -> sandwich.User
	32, // 63: sandwich.ScheduledEventUser.Member:type_name -> sandwich.GuildMember
	61, // 64: sandwich.Message.Author:type_name -> sandwich.User
	32, // 65: sandwich.Message.Member:type_name -> sandwich.GuildMember
	61, // 66: sandwich.Message.Mentions:type_name -> sandwich.User
	45, // 67: sandwich.Message.MentionChannels:type_name -> sandwich.MessageChannelMention
	49, // 68: sandwich.Message.Attachments:type_name -> sandwich.MessageAttachment
	21, // 69: sandwich.Message.Embeds:type_name -> sandwich.Embed
	47, // 70: sandwich.Message.Reactions:type_name -> sandwich.MessageReaction
	50, // 71: sandwich.Message.Activity:type_name -> sandwich.MessageActivity
	0,  // 72: sandwich.Message.Application:type_name -> sandwich.Application
	46, // 73: sandwich.Message.MessageReference:type_name -> sandwich.MessageReference
	43, // 74: sandwich.Message.ReferencedMessage:type_name -> sandwich.Message
	44, // 75: sandwich.Message.Interaction:type_name -> sandwich.MessageInteraction
	16, // 76: sandwich.Message.Thread:type_name -> sandwich.Channel
	15, // 77: sandwich.Message.Components:type_name -> sandwich.InteractionComponent
	60, // 78: sandwich.Message.StickerItems:type_name -> sandwich.MessageSticker
	61, // 79: sandwich.MessageInteraction.User:type_name -> sandwich.User
	29, // 80: sandwich.MessageReaction.Emoji:type_name -> sandwich.Emoji
	52, // 81: sandwich.Activity.Timestamps:type_name -> sandwich.Timestamps
	53, // 82: sandwich.Activity.Party:type_name -> sandwich.Party
	54, // 83: sandwich.Activity.Assets:type_name -> sandwich.Assets
	55, // 84: sandwich.Activity.Secrets:type_name -> sandwich.Secrets
	58, // 85: sandwich.Role.Tags:type_name -> sandwich.RoleTag
	61, // 86: sandwich.Sticker.User:type_name -> sandwich.User
	61, // 87: sandwich.Webhook.User:type_name -> sandwich.User
	21, // 88: sandwich.WebhookMessage.Embeds:type_name -> sandwich.Embed
	48, // 89: sandwich.WebhookMessage.AllowedMentions:type_name -> sandwich.MessageAllowedMentions
	15, // 90: sandwich.WebhookMessage.Components:type_name -> sandwich.InteractionComponent
	91, // [91:91] is the sub-list for method output_type
	91, // [91:91] is the sub-list for method input_type
	91, // [91:91] is the sub-list for extension type_name
	91, // [91:91] is the sub-list for extension extendee
	0,  // [0:91] is the sub-list for field type_name
}

func init() { file_discord_proto_init() }
func file_discord_proto_init() {
	if File_discord_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_discord_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationTeamMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildApplicationCommandPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationCommandPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationCommandOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationCommandOptionChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionDataOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionResolvedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationSelectOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelOverwrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Embed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedFooter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedThumbnail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedAuthor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emoji); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Guild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnavailableGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayBot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TooManyRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDMChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Invite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteStageInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledEventUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageInteraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageChannelMention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageAllowedMentions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Party); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secrets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sticker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSticker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Webhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_discord_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_discord_proto_goTypes,
		DependencyIndexes: file_discord_proto_depIdxs,
		MessageInfos:      file_discord_proto_msgTypes,
	}.Build()
	File_discord_proto = out.File
	file_discord_proto_rawDesc = nil
	file_discord_proto_goTypes = nil
	file_discord_proto_depIdxs = nil
}
